import streamlit as st
import plotly.graph_objects as go
import plotly.express as px
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import io

from exchanges.mexc_client import MEXCClient
from core.intelligent_trader import IntelligentTrader
from core.advanced_trader import AdvancedTrader
from auth.security import SecureDataManager
from utils.logger import get_logger

logger = get_logger(__name__)

def render_trade_history():
    """–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫"""
    
    st.title("üìä –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫")
    st.markdown("**–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π**")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á–∏
    api_key, secret_key = SecureDataManager.get_api_keys()
    
    if not api_key or not secret_key:
        st.warning("üîë –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å API –∫–ª—é—á–∏ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    if 'history_mexc_client' not in st.session_state:
        st.session_state.history_mexc_client = MEXCClient(api_key, secret_key, demo_mode=True)
    
    if 'history_intelligent_trader' not in st.session_state:
        st.session_state.history_intelligent_trader = IntelligentTrader(
            st.session_state.history_mexc_client, demo_mode=True
        )
    
    if 'history_advanced_trader' not in st.session_state:
        st.session_state.history_advanced_trader = AdvancedTrader(
            st.session_state.history_mexc_client, demo_mode=True
        )
    
    # –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –º–µ–∂–¥—É –¥–µ–º–æ –∏ —Ä–µ–∞–ª—å–Ω—ã–º —Ä–µ–∂–∏–º–æ–º
    col1, col2 = st.columns([3, 1])
    
    with col1:
        st.markdown("### üìã –§–∏–ª—å—Ç—Ä—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    with col2:
        mode = st.selectbox("–†–µ–∂–∏–º –¥–∞–Ω–Ω—ã—Ö:", ["–î–µ–º–æ —Ç–æ—Ä–≥–æ–≤–ª—è", "–†–µ–∞–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è"], key="history_mode")
        demo_mode = mode == "–î–µ–º–æ —Ç–æ—Ä–≥–æ–≤–ª—è"
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
    show_history_filters()
    st.divider()
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        show_trade_list(demo_mode)
        st.divider()
        show_performance_analysis(demo_mode)
    
    with col2:
        show_trade_statistics(demo_mode)
        st.divider()
        show_export_options(demo_mode)

def show_history_filters():
    """–§–∏–ª—å—Ç—Ä—ã –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫"""
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        date_range = st.selectbox(
            "–ü–µ—Ä–∏–æ–¥:",
            ["–°–µ–≥–æ–¥–Ω—è", "7 –¥–Ω–µ–π", "30 –¥–Ω–µ–π", "90 –¥–Ω–µ–π", "–í—Å–µ –≤—Ä–µ–º—è"],
            index=2
        )
    
    with col2:
        trade_type = st.selectbox(
            "–¢–∏–ø —Å–¥–µ–ª–∫–∏:",
            ["–í—Å–µ", "BUY", "SELL"]
        )
    
    with col3:
        symbol_filter = st.text_input("–§–∏–ª—å—Ç—Ä –ø–æ —Å–∏–º–≤–æ–ª—É:", placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: BTC")
    
    with col4:
        min_pnl = st.number_input("–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π P&L:", value=None, placeholder="–ù–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –≤ session state
    st.session_state.history_filters = {
        'date_range': date_range,
        'trade_type': trade_type,
        'symbol_filter': symbol_filter.upper() if symbol_filter else '',
        'min_pnl': min_pnl
    }

def show_trade_list(demo_mode: bool):
    """–°–ø–∏—Å–æ–∫ —Å–¥–µ–ª–æ–∫"""
    
    st.markdown("### üìú –°–ø–∏—Å–æ–∫ —Å–¥–µ–ª–æ–∫")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–¥–µ–ª–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        if demo_mode:
            if 'demo_intelligent_trader' in st.session_state:
                trade_history = st.session_state.demo_intelligent_trader.trade_history
            else:
                trade_history = st.session_state.history_intelligent_trader.trade_history
        else:
            if 'live_intelligent_trader' in st.session_state:
                trade_history = st.session_state.live_intelligent_trader.trade_history
            else:
                # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é —Å –±–∏—Ä–∂–∏
                trade_history = get_real_trade_history()
        
        if not trade_history:
            st.info("üì≠ –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫ –ø—É—Å—Ç–∞")
            return
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        filtered_trades = apply_trade_filters(trade_history)
        
        if not filtered_trades:
            st.info("üîç –ù–µ—Ç —Å–¥–µ–ª–æ–∫, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä–∞–º")
            return
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ DataFrame
        df = pd.DataFrame(filtered_trades)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        display_df = df.copy()
        display_df['entry_time'] = pd.to_datetime(display_df['entry_time']).dt.strftime('%Y-%m-%d %H:%M')
        display_df['exit_time'] = pd.to_datetime(display_df['exit_time']).dt.strftime('%Y-%m-%d %H:%M')
        display_df['entry_price'] = display_df['entry_price'].round(6)
        display_df['exit_price'] = display_df['exit_price'].round(6)
        display_df['quantity'] = display_df['quantity'].round(6)
        display_df['pnl'] = display_df['pnl'].round(2)
        display_df['pnl_pct'] = display_df['pnl_pct'].round(2)
        
        # –í—ã–±–∏—Ä–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        display_columns = ['symbol', 'side', 'entry_time', 'exit_time', 
                          'entry_price', 'exit_price', 'quantity', 'pnl', 'pnl_pct', 'reason']
        
        display_df = display_df[display_columns].copy()
        display_df.columns = ['–°–∏–º–≤–æ–ª', '–°—Ç–æ—Ä–æ–Ω–∞', '–í—Ä–µ–º—è –≤—Ö–æ–¥–∞', '–í—Ä–µ–º—è –≤—ã—Ö–æ–¥–∞',
                             '–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞', '–¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', 'P&L ($)', 'P&L (%)', '–ü—Ä–∏—á–∏–Ω–∞']
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É
        def highlight_pnl(row):
            if row['P&L ($)'] > 0:
                return ['background-color: rgba(0, 255, 0, 0.1)'] * len(row)
            elif row['P&L ($)'] < 0:
                return ['background-color: rgba(255, 0, 0, 0.1)'] * len(row)
            else:
                return [''] * len(row)
        
        styled_df = display_df.style.apply(highlight_pnl, axis=1)
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        st.dataframe(styled_df, use_container_width=True)
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è –¥–ª—è –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–¥–µ–ª–æ–∫
        if len(filtered_trades) > 50:
            st.info(f"üìÑ –ü–æ–∫–∞–∑–∞–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 –∏–∑ {len(filtered_trades)} —Å–¥–µ–ª–æ–∫")
    
    except Exception as e:
        logger.error(f"Error showing trade list: {str(e)}")
        st.error("–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–¥–µ–ª–æ–∫")

def apply_trade_filters(trade_history: list) -> list:
    """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∫ –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫"""
    
    try:
        filtered_trades = trade_history.copy()
        filters = st.session_state.get('history_filters', {})
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ
        date_range = filters.get('date_range', '–í—Å–µ –≤—Ä–µ–º—è')
        if date_range != '–í—Å–µ –≤—Ä–µ–º—è':
            days_map = {
                '–°–µ–≥–æ–¥–Ω—è': 1,
                '7 –¥–Ω–µ–π': 7,
                '30 –¥–Ω–µ–π': 30,
                '90 –¥–Ω–µ–π': 90
            }
            
            days = days_map.get(date_range, 30)
            cutoff_date = datetime.now() - timedelta(days=days)
            
            filtered_trades = [
                trade for trade in filtered_trades
                if trade['exit_time'] >= cutoff_date
            ]
        
        # –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É —Å–¥–µ–ª–∫–∏
        trade_type = filters.get('trade_type', '–í—Å–µ')
        if trade_type != '–í—Å–µ':
            filtered_trades = [
                trade for trade in filtered_trades
                if trade['side'] == trade_type
            ]
        
        # –§–∏–ª—å—Ç—Ä –ø–æ —Å–∏–º–≤–æ–ª—É
        symbol_filter = filters.get('symbol_filter', '')
        if symbol_filter:
            filtered_trades = [
                trade for trade in filtered_trades
                if symbol_filter in trade['symbol']
            ]
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º—É P&L
        min_pnl = filters.get('min_pnl')
        if min_pnl is not None:
            filtered_trades = [
                trade for trade in filtered_trades
                if trade['pnl'] >= min_pnl
            ]
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã—Ö–æ–¥–∞ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
        filtered_trades.sort(key=lambda x: x['exit_time'], reverse=True)
        
        return filtered_trades[:50]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    
    except Exception as e:
        logger.error(f"Error applying trade filters: {str(e)}")
        return trade_history

def get_real_trade_history():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫ —Å –±–∏—Ä–∂–∏"""
    
    try:
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é —Å MEXC API
        # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        return []
    except Exception as e:
        logger.error(f"Error getting real trade history: {str(e)}")
        return []

def show_performance_analysis(demo_mode: bool):
    """–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    
    st.markdown("### üìà –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤–ª–∏
        if demo_mode:
            if 'demo_intelligent_trader' in st.session_state:
                trade_history = st.session_state.demo_intelligent_trader.trade_history
            else:
                trade_history = st.session_state.history_intelligent_trader.trade_history
        else:
            if 'live_intelligent_trader' in st.session_state:
                trade_history = st.session_state.live_intelligent_trader.trade_history
            else:
                trade_history = []
        
        if not trade_history:
            st.info("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
            return
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        filtered_trades = apply_trade_filters(trade_history)
        
        if not filtered_trades:
            st.info("–ù–µ—Ç —Å–¥–µ–ª–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤")
            return
        
        df = pd.DataFrame(filtered_trades)
        
        # –ì—Ä–∞—Ñ–∏–∫ –∫—Ä–∏–≤–æ–π P&L
        df_sorted = df.sort_values('exit_time')
        df_sorted['cumulative_pnl'] = df_sorted['pnl'].cumsum()
        df_sorted['trade_number'] = range(1, len(df_sorted) + 1)
        
        tab1, tab2, tab3 = st.tabs(["üìä –ö—Ä–∏–≤–∞—è P&L", "üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ", "‚è±Ô∏è –í—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏–∑"])
        
        with tab1:
            fig = go.Figure()
            
            # –ö—Ä–∏–≤–∞—è –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–≥–æ P&L
            fig.add_trace(go.Scatter(
                x=df_sorted['trade_number'],
                y=df_sorted['cumulative_pnl'],
                mode='lines+markers',
                name='–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π P&L',
                line=dict(color='#00D4AA', width=2),
                marker=dict(size=4)
            ))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω—É–ª–µ–≤—É—é –ª–∏–Ω–∏—é
            fig.add_hline(y=0, line_dash="dash", line_color="gray", opacity=0.5)
            
            fig.update_layout(
                title="–ö—Ä–∏–≤–∞—è –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–≥–æ P&L",
                xaxis_title="–ù–æ–º–µ—Ä —Å–¥–µ–ª–∫–∏",
                yaxis_title="P&L (USDT)",
                height=400
            )
            
            st.plotly_chart(fig, use_container_width=True)
        
        with tab2:
            # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ P&L
            fig_hist = px.histogram(
                df,
                x='pnl',
                nbins=20,
                title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ P&L –ø–æ —Å–¥–µ–ª–∫–∞–º",
                color_discrete_sequence=['#00D4AA']
            )
            
            fig_hist.update_layout(
                xaxis_title="P&L (USDT)",
                yaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫",
                height=400
            )
            
            st.plotly_chart(fig_hist, use_container_width=True)
            
            # –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö/—É–±—ã—Ç–æ—á–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
            winning_trades = len(df[df['pnl'] > 0])
            losing_trades = len(df[df['pnl'] < 0])
            breakeven_trades = len(df[df['pnl'] == 0])
            
            fig_pie = px.pie(
                values=[winning_trades, losing_trades, breakeven_trades],
                names=['–ü—Ä–∏–±—ã–ª—å–Ω—ã–µ', '–£–±—ã—Ç–æ—á–Ω—ã–µ', '–í –Ω–æ–ª—å'],
                title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É",
                color_discrete_sequence=['#00D4AA', '#FF6B6B', '#FFD93D']
            )
            
            st.plotly_chart(fig_pie, use_container_width=True)
        
        with tab3:
            # –ê–Ω–∞–ª–∏–∑ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            df['hour'] = pd.to_datetime(df['exit_time']).dt.hour
            df['day_of_week'] = pd.to_datetime(df['exit_time']).dt.day_name()
            
            # P&L –ø–æ —á–∞—Å–∞–º
            hourly_pnl = df.groupby('hour')['pnl'].sum().reset_index()
            
            fig_hourly = px.bar(
                hourly_pnl,
                x='hour',
                y='pnl',
                title="P&L –ø–æ —á–∞—Å–∞–º –¥–Ω—è",
                color='pnl',
                color_continuous_scale='RdYlGn'
            )
            
            fig_hourly.update_layout(
                xaxis_title="–ß–∞—Å –¥–Ω—è",
                yaxis_title="P&L (USDT)",
                height=300
            )
            
            st.plotly_chart(fig_hourly, use_container_width=True)
            
            # P&L –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
            day_order = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
            daily_pnl = df.groupby('day_of_week')['pnl'].sum().reindex(day_order, fill_value=0).reset_index()
            
            fig_daily = px.bar(
                daily_pnl,
                x='day_of_week',
                y='pnl',
                title="P&L –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏",
                color='pnl',
                color_continuous_scale='RdYlGn'
            )
            
            fig_daily.update_layout(
                xaxis_title="–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏",
                yaxis_title="P&L (USDT)",
                height=300
            )
            
            st.plotly_chart(fig_daily, use_container_width=True)
    
    except Exception as e:
        logger.error(f"Error showing performance analysis: {str(e)}")
        st.error("–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")

def show_trade_statistics(demo_mode: bool):
    """–¢–æ—Ä–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    
    st.markdown("### üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        if demo_mode:
            if 'demo_intelligent_trader' in st.session_state:
                stats = st.session_state.demo_intelligent_trader.get_performance_stats()
                trade_history = st.session_state.demo_intelligent_trader.trade_history
            else:
                stats = st.session_state.history_intelligent_trader.get_performance_stats()
                trade_history = st.session_state.history_intelligent_trader.trade_history
        else:
            if 'live_intelligent_trader' in st.session_state:
                stats = st.session_state.live_intelligent_trader.get_performance_stats()
                trade_history = st.session_state.live_intelligent_trader.trade_history
            else:
                stats = {}
                trade_history = []
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∫ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        filtered_trades = apply_trade_filters(trade_history) if trade_history else []
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        st.metric("üéØ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫", stats.get('total_trades', 0))
        st.metric("‚úÖ –ü—Ä–∏–±—ã–ª—å–Ω—ã–µ", stats.get('winning_trades', 0))
        st.metric("‚ùå –£–±—ã—Ç–æ—á–Ω—ã–µ", stats.get('losing_trades', 0))
        
        win_rate = stats.get('win_rate', 0)
        st.metric("üìä –í–∏–Ω—Ä–µ–π—Ç", f"{win_rate:.1f}%")
        
        total_pnl = stats.get('total_pnl', 0)
        pnl_color = "üü¢" if total_pnl >= 0 else "üî¥"
        st.metric(f"{pnl_color} –û–±—â–∏–π P&L", f"${total_pnl:+.2f}")
        
        avg_pnl = stats.get('average_pnl', 0)
        st.metric("üìä –°—Ä–µ–¥–Ω–∏–π P&L", f"${avg_pnl:+.2f}")
        
        best_trade = stats.get('best_trade', 0)
        st.metric("üèÜ –õ—É—á—à–∞—è —Å–¥–µ–ª–∫–∞", f"${best_trade:+.2f}")
        
        worst_trade = stats.get('worst_trade', 0)
        st.metric("üìâ –•—É–¥—à–∞—è —Å–¥–µ–ª–∫–∞", f"${worst_trade:+.2f}")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º
        if filtered_trades:
            st.divider()
            st.markdown("**–ü–æ —Ç–µ–∫—É—â–∏–º —Ñ–∏–ª—å—Ç—Ä–∞–º:**")
            
            df = pd.DataFrame(filtered_trades)
            
            filtered_total = len(df)
            filtered_winning = len(df[df['pnl'] > 0])
            filtered_losing = len(df[df['pnl'] < 0])
            filtered_win_rate = (filtered_winning / filtered_total) * 100 if filtered_total > 0 else 0
            
            st.metric("üîç –°–¥–µ–ª–æ–∫ –≤ —Ñ–∏–ª—å—Ç—Ä–µ", filtered_total)
            st.metric("üéØ –í–∏–Ω—Ä–µ–π—Ç (—Ñ–∏–ª—å—Ç—Ä)", f"{filtered_win_rate:.1f}%")
            
            filtered_total_pnl = df['pnl'].sum()
            filtered_avg_pnl = df['pnl'].mean()
            
            st.metric("üí∞ P&L (—Ñ–∏–ª—å—Ç—Ä)", f"${filtered_total_pnl:+.2f}")
            st.metric("üìä –°—Ä–µ–¥–Ω–∏–π P&L (—Ñ–∏–ª—å—Ç—Ä)", f"${filtered_avg_pnl:+.2f}")
    
    except Exception as e:
        logger.error(f"Error showing trade statistics: {str(e)}")
        st.error("–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

def show_export_options(demo_mode: bool):
    """–û–ø—Ü–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"""
    
    st.markdown("### üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        if demo_mode:
            if 'demo_intelligent_trader' in st.session_state:
                trade_history = st.session_state.demo_intelligent_trader.trade_history
            else:
                trade_history = st.session_state.history_intelligent_trader.trade_history
        else:
            if 'live_intelligent_trader' in st.session_state:
                trade_history = st.session_state.live_intelligent_trader.trade_history
            else:
                trade_history = []
        
        if not trade_history:
            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        filtered_trades = apply_trade_filters(trade_history)
        
        if not filtered_trades:
            st.info("–ù–µ—Ç —Å–¥–µ–ª–æ–∫ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤")
            return
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        df = pd.DataFrame(filtered_trades)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–ª–æ–Ω–∫–∏
        export_df = df.copy()
        export_df['entry_time'] = pd.to_datetime(export_df['entry_time']).dt.strftime('%Y-%m-%d %H:%M:%S')
        export_df['exit_time'] = pd.to_datetime(export_df['exit_time']).dt.strftime('%Y-%m-%d %H:%M:%S')
        
        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        export_df.columns = [
            '–°–∏–º–≤–æ–ª', '–°—Ç–æ—Ä–æ–Ω–∞', '–¶–µ–Ω–∞_–≤—Ö–æ–¥–∞', '–¶–µ–Ω–∞_–≤—ã—Ö–æ–¥–∞', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
            'PnL_USDT', 'PnL_–ø—Ä–æ—Ü–µ–Ω—Ç', '–í—Ä–µ–º—è_–≤—Ö–æ–¥–∞', '–í—Ä–µ–º—è_–≤—ã—Ö–æ–¥–∞', '–ü—Ä–∏—á–∏–Ω–∞_–∑–∞–∫—Ä—ã—Ç–∏—è',
            '–°–∏–ª–∞_—Å–∏–≥–Ω–∞–ª–∞'
        ]
        
        # –ö–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
        col1, col2 = st.columns(2)
        
        with col1:
            # –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV
            csv_buffer = io.StringIO()
            export_df.to_csv(csv_buffer, index=False, encoding='utf-8')
            csv_data = csv_buffer.getvalue()
            
            st.download_button(
                label="üìÑ –°–∫–∞—á–∞—Ç—å CSV",
                data=csv_data,
                file_name=f"trade_history_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                mime="text/csv",
                use_container_width=True
            )
        
        with col2:
            # –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel
            excel_buffer = io.BytesIO()
            with pd.ExcelWriter(excel_buffer, engine='openpyxl') as writer:
                export_df.to_excel(writer, index=False, sheet_name='Trade_History')
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–π –ª–∏—Å—Ç
                stats_data = {
                    '–ú–µ—Ç—Ä–∏–∫–∞': ['–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫', '–ü—Ä–∏–±—ã–ª—å–Ω—ã–µ —Å–¥–µ–ª–∫–∏', '–£–±—ã—Ç–æ—á–Ω—ã–µ —Å–¥–µ–ª–∫–∏', 
                               '–í–∏–Ω—Ä–µ–π—Ç (%)', '–û–±—â–∏–π P&L (USDT)', '–°—Ä–µ–¥–Ω–∏–π P&L (USDT)',
                               '–õ—É—á—à–∞—è —Å–¥–µ–ª–∫–∞ (USDT)', '–•—É–¥—à–∞—è —Å–¥–µ–ª–∫–∞ (USDT)'],
                    '–ó–Ω–∞—á–µ–Ω–∏–µ': [
                        len(export_df),
                        len(export_df[export_df['PnL_USDT'] > 0]),
                        len(export_df[export_df['PnL_USDT'] < 0]),
                        (len(export_df[export_df['PnL_USDT'] > 0]) / len(export_df)) * 100 if len(export_df) > 0 else 0,
                        export_df['PnL_USDT'].sum(),
                        export_df['PnL_USDT'].mean(),
                        export_df['PnL_USDT'].max(),
                        export_df['PnL_USDT'].min()
                    ]
                }
                stats_df = pd.DataFrame(stats_data)
                stats_df.to_excel(writer, index=False, sheet_name='Statistics')
            
            excel_data = excel_buffer.getvalue()
            
            st.download_button(
                label="üìä –°–∫–∞—á–∞—Ç—å Excel",
                data=excel_data,
                file_name=f"trade_history_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                use_container_width=True
            )
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω—ã—Ö
        st.info(f"üìä –ì–æ—Ç–æ–≤–æ –∫ —ç–∫—Å–ø–æ—Ä—Ç—É: {len(filtered_trades)} —Å–¥–µ–ª–æ–∫")
        
        # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
        with st.expander("üëÄ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞"):
            st.dataframe(export_df.head(10), use_container_width=True)
    
    except Exception as e:
        logger.error(f"Error showing export options: {str(e)}")
        st.error("–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")

# –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
if 'history_last_update' not in st.session_state:
    st.session_state.history_last_update = datetime.now()

if (datetime.now() - st.session_state.history_last_update).total_seconds() > 60:
    st.session_state.history_last_update = datetime.now()
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    pass
