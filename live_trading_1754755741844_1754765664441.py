import streamlit as st
import plotly.graph_objects as go
import plotly.express as px
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import asyncio
import threading

from exchanges.mexc_client import MEXCClient
from core.intelligent_trader import IntelligentTrader
from core.advanced_trader import AdvancedTrader
from auth.security import SecureDataManager
from utils.logger import get_logger

logger = get_logger(__name__)

def render_live_trading():
    """–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    
    st.title("üìà –†–µ–∞–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è")
    st.markdown("**‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –†–µ–∞–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤–∞—à–∏—Ö —Å—Ä–µ–¥—Å—Ç–≤**")
    
    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ —Ä–∏—Å–∫–∞—Ö
    with st.expander("‚ö†Ô∏è –í–ê–ñ–ù–û–ï –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï –û –†–ò–°–ö–ê–•", expanded=True):
        st.markdown("""
        ### üö® –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï –û –†–ò–°–ö–ê–•
        
        **–¢–æ—Ä–≥–æ–≤–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏ —Å–æ–ø—Ä—è–∂–µ–Ω–∞ —Å –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–æ–º:**
        - –í–æ–∑–º–æ–∂–Ω–∞ –ø–æ–ª–Ω–∞—è –ø–æ—Ç–µ—Ä—è –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤
        - –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –±—ã—Å—Ç—Ä—ã–º —É–±—ã—Ç–∫–∞–º
        - AI –∞–ª–≥–æ—Ä–∏—Ç–º—ã –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É—é—Ç –ø—Ä–∏–±—ã–ª—å
        - –†—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –º–æ–≥—É—Ç –∏–∑–º–µ–Ω–∏—Ç—å—Å—è –≤–Ω–µ–∑–∞–ø–Ω–æ
        
        **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
        - –ù–∞—á–Ω–∏—Ç–µ —Å –Ω–µ–±–æ–ª—å—à–∏—Ö —Å—É–º–º
        - –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä—É–π—Ç–µ –±–æ–ª—å—à–µ, —á–µ–º –º–æ–∂–µ—Ç–µ –ø–æ–∑–≤–æ–ª–∏—Ç—å —Å–µ–±–µ –ø–æ—Ç–µ—Ä—è—Ç—å
        - –†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Å–≤–æ–∏ –ø–æ–∑–∏—Ü–∏–∏
        - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç–æ–ø-–ª–æ—Å—Å—ã –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —É–±—ã—Ç–∫–æ–≤
        
        **–ù–∞–∂–∏–º–∞—è "–ü–æ–Ω–∏–º–∞—é —Ä–∏—Å–∫–∏", –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –ø–æ–ª–Ω–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Ä–∏—Å–∫–æ–≤.**
        """)
        
        if not st.session_state.get('risks_accepted', False):
            if st.button("‚úÖ –ü–æ–Ω–∏–º–∞—é —Ä–∏—Å–∫–∏ –∏ –≥–æ—Ç–æ–≤ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å", type="primary"):
                st.session_state.risks_accepted = True
                st.rerun()
            else:
                st.stop()
        else:
            st.success("‚úÖ –†–∏—Å–∫–∏ –ø—Ä–∏–Ω—è—Ç—ã. –¢–æ—Ä–≥–æ–≤–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∞.")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á–∏
    api_key, secret_key = SecureDataManager.get_api_keys()
    
    if not api_key or not secret_key:
        st.error("üîë –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å API –∫–ª—é—á–∏ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
    if 'live_mexc_client' not in st.session_state:
        st.session_state.live_mexc_client = MEXCClient(api_key, secret_key, demo_mode=False)
    
    if 'live_intelligent_trader' not in st.session_state:
        st.session_state.live_intelligent_trader = IntelligentTrader(
            st.session_state.live_mexc_client, demo_mode=False
        )
    
    if 'live_advanced_trader' not in st.session_state:
        st.session_state.live_advanced_trader = AdvancedTrader(
            st.session_state.live_mexc_client, demo_mode=False
        )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API
    try:
        server_time = st.session_state.live_mexc_client.get_server_time()
        if 'error' in server_time:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MEXC API: {server_time.get('error')}")
            st.stop()
    except Exception as e:
        st.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ API: {str(e)}")
        st.stop()
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    show_live_controls()
    st.divider()
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        show_live_trading_interface()
        st.divider()
        show_live_market_data()
    
    with col2:
        show_live_balance()
        st.divider()
        show_live_positions()
        st.divider()
        show_live_performance()

def show_live_controls():
    """–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–µ–π"""
    
    st.markdown("### üéÆ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–µ–π")
    
    # –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å AI —Ç–æ—Ä–≥–æ–≤–ª—é", use_container_width=True):
            if not st.session_state.get('live_auto_trading', False):
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                if st.session_state.get('trading_confirmed', False):
                    st.session_state.live_auto_trading = True
                    st.success("‚úÖ AI —Ç–æ—Ä–≥–æ–≤–ª—è –∑–∞–ø—É—â–µ–Ω–∞!")
                    logger.info("Live AI trading started")
                else:
                    st.session_state.trading_confirmed = True
                    st.warning("‚ö†Ô∏è –ù–∞–∂–º–∏—Ç–µ –µ—â–µ —Ä–∞–∑ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø—É—Å–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏")
            else:
                st.warning("‚ö†Ô∏è AI —Ç–æ—Ä–≥–æ–≤–ª—è —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞")
    
    with col2:
        if st.button("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å AI —Ç–æ—Ä–≥–æ–≤–ª—é", use_container_width=True):
            if st.session_state.get('live_auto_trading', False):
                st.session_state.live_auto_trading = False
                st.session_state.trading_confirmed = False
                st.info("‚ÑπÔ∏è AI —Ç–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
                logger.info("Live AI trading stopped")
    
    with col3:
        if st.button("üö® –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê", use_container_width=True):
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏
            st.session_state.live_auto_trading = False
            st.session_state.trading_confirmed = False
            st.error("üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!")
            logger.warning("Emergency stop activated for live trading")
    
    with col4:
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", use_container_width=True):
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            st.session_state.live_data_last_update = datetime.now() - timedelta(minutes=10)
            st.rerun()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞
    with st.expander("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞", expanded=False):
        col1, col2, col3 = st.columns(3)
        
        with col1:
            max_daily_loss = st.number_input("–ú–∞–∫—Å. –¥–Ω–µ–≤–Ω–æ–π —É–±—ã—Ç–æ–∫ (USDT)", 
                                           min_value=0.0, 
                                           value=100.0, 
                                           step=10.0)
            max_positions = st.slider("–ú–∞–∫—Å–∏–º—É–º –ø–æ–∑–∏—Ü–∏–π –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ", 1, 10, 5)
        
        with col2:
            risk_per_trade = st.slider("–†–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É (%)", 0.1, 5.0, 1.0, 0.1)
            max_leverage = st.slider("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø–ª–µ—á–æ", 1, 20, 3)
        
        with col3:
            stop_loss = st.slider("–°—Ç–æ–ø-–ª–æ—Å—Å (%)", 1.0, 10.0, 3.0, 0.1)
            take_profit = st.slider("–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç (%)", 2.0, 20.0, 6.0, 0.1)
        
        if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞"):
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ç—Ä–µ–π–¥–µ—Ä—ã
            st.success("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    
    # –°—Ç–∞—Ç—É—Å —Ç–æ—Ä–≥–æ–≤–ª–∏
    if st.session_state.get('live_auto_trading', False):
        st.success("üü¢ AI —Ç–æ—Ä–≥–æ–≤–ª—è –∞–∫—Ç–∏–≤–Ω–∞ - –í–µ–¥–µ—Ç—Å—è —Ä–µ–∞–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è")
    else:
        st.info("üî¥ AI —Ç–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

def show_live_trading_interface():
    """–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    
    st.markdown("### üíπ –†—É—á–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã
    try:
        exchange_info = st.session_state.live_mexc_client.get_exchange_info()
        if 'error' not in exchange_info and 'symbols' in exchange_info:
            symbols = [s['symbol'] for s in exchange_info['symbols'] 
                      if s['status'] == 'TRADING' and s['symbol'].endswith('USDT')][:50]
        else:
            # Fallback –∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã–º –ø–∞—Ä–∞–º
            symbols = ['BTCUSDT', 'ETHUSDT', 'BNBUSDT', 'ADAUSDT', 'DOGEUSDT', 
                      'SOLUSDT', 'XRPUSDT', 'DOTUSDT', 'AVAXUSDT', 'MATICUSDT']
    except:
        symbols = ['BTCUSDT', 'ETHUSDT', 'BNBUSDT', 'ADAUSDT', 'DOGEUSDT']
    
    selected_symbol = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É:", symbols, key="live_symbol_select")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–º–≤–æ–ª–µ
    try:
        ticker = st.session_state.live_mexc_client.get_ticker_24hr(selected_symbol)
        if 'error' not in ticker:
            current_price = float(ticker.get('lastPrice', 0))
            change_24h = float(ticker.get('priceChangePercent', 0))
            volume_24h = float(ticker.get('quoteVolume', 0))
            
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞", f"${current_price:.6f}")
            with col2:
                st.metric("–ò–∑–º–µ–Ω–µ–Ω–∏–µ 24—á", f"{change_24h:+.2f}%", delta=f"{change_24h:+.2f}%")
            with col3:
                st.metric("–û–±—ä–µ–º 24—á", f"${volume_24h:,.0f}")
        else:
            current_price = 0
            st.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä–µ")
    except Exception as e:
        current_price = 0
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
    
    if current_price > 0:
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤
        try:
            account_info = st.session_state.live_mexc_client.get_account_info()
            usdt_balance = 0
            asset_balance = 0
            
            if 'error' not in account_info and 'balances' in account_info:
                for balance in account_info['balances']:
                    if balance['asset'] == 'USDT':
                        usdt_balance = float(balance['free'])
                    elif balance['asset'] == selected_symbol.replace('USDT', ''):
                        asset_balance = float(balance['free'])
        except:
            usdt_balance = 0
            asset_balance = 0
        
        # –§–æ—Ä–º–∞ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞
        with st.form("live_trade_form"):
            col1, col2 = st.columns(2)
            
            with col1:
                trade_type = st.selectbox("–¢–∏–ø —Å–¥–µ–ª–∫–∏:", ["BUY", "SELL"], key="live_trade_type")
                order_type = st.selectbox("–¢–∏–ø –æ—Ä–¥–µ—Ä–∞:", ["MARKET", "LIMIT"], key="live_order_type")
            
            with col2:
                max_quantity = usdt_balance / current_price if trade_type == "BUY" else asset_balance
                quantity = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:", 
                                         min_value=0.0, 
                                         max_value=max_quantity,
                                         step=0.000001, 
                                         format="%.6f",
                                         key="live_quantity")
                
                if order_type == "LIMIT":
                    limit_price = st.number_input("–¶–µ–Ω–∞ –ª–∏–º–∏—Ç–∞:", 
                                                min_value=0.0, 
                                                value=current_price,
                                                step=0.000001, 
                                                format="%.6f",
                                                key="live_limit_price")
                else:
                    limit_price = current_price
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞
            st.info(f"üí∞ –î–æ—Å—Ç—É–ø–Ω–æ: {usdt_balance:.2f} USDT, {asset_balance:.6f} {selected_symbol.replace('USDT', '')}")
            
            # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ—Ä–¥–µ—Ä–∞
            if quantity > 0:
                total_cost = quantity * limit_price
                st.info(f"üí∏ –°—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ä–¥–µ—Ä–∞: ${total_cost:.2f} USDT")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤
                if trade_type == "BUY" and total_cost > usdt_balance:
                    st.error("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ USDT –¥–ª—è –ø–æ–∫—É–ø–∫–∏")
                elif trade_type == "SELL" and quantity > asset_balance:
                    st.error("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞–∫—Ç–∏–≤–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏")
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
            confirm_order = st.checkbox("‚úÖ –Ø –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –†–ï–ê–õ–¨–ù–û–ì–û –æ—Ä–¥–µ—Ä–∞", key="live_confirm_order")
            
            if st.form_submit_button("üî• –†–ê–ó–ú–ï–°–¢–ò–¢–¨ –†–ï–ê–õ–¨–ù–´–ô –û–†–î–ï–†", 
                                   use_container_width=True, 
                                   type="primary"):
                
                if not confirm_order:
                    st.error("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞")
                elif quantity <= 0:
                    st.error("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
                else:
                    try:
                        with st.spinner("–†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞..."):
                            # –†–∞–∑–º–µ—â–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –æ—Ä–¥–µ—Ä
                            result = st.session_state.live_mexc_client.place_order(
                                symbol=selected_symbol,
                                side=trade_type,
                                order_type=order_type,
                                quantity=quantity,
                                price=limit_price if order_type == "LIMIT" else None
                            )
                            
                            if 'error' not in result:
                                st.success(f"‚úÖ –û–†–î–ï–† –†–ê–ó–ú–ï–©–ï–ù –£–°–ü–ï–®–ù–û!")
                                st.success(f"üÜî ID –æ—Ä–¥–µ—Ä–∞: {result.get('orderId')}")
                                st.success(f"üìä –°—Ç–∞—Ç—É—Å: {result.get('status')}")
                                logger.info(f"Live order placed: {trade_type} {quantity} {selected_symbol} at {limit_price}")
                            else:
                                st.error(f"‚ùå –û–®–ò–ë–ö–ê –†–ê–ó–ú–ï–©–ï–ù–ò–Ø –û–†–î–ï–†–ê: {result.get('error')}")
                                logger.error(f"Live order failed: {result.get('error')}")
                    
                    except Exception as e:
                        st.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {str(e)}")
                        logger.error(f"Critical error placing live order: {str(e)}")

def show_live_market_data():
    """–†–µ–∞–ª—å–Ω—ã–µ —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    
    st.markdown("### üìä –†–µ–∞–ª—å–Ω—ã–µ —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å MEXC
        market_conditions = st.session_state.live_mexc_client.analyze_market_conditions()
        top_gainers = st.session_state.live_mexc_client.get_top_gainers_losers(10)
        volume_leaders = st.session_state.live_mexc_client.get_volume_leaders(10)
        
        tab1, tab2, tab3 = st.tabs(["üìà –†—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è", "üî• –¢–æ–ø –∞–∫—Ç–∏–≤—ã", "üìä –û–±—ä–µ–º—ã"])
        
        with tab1:
            if 'error' not in market_conditions:
                col1, col2 = st.columns(2)
                
                with col1:
                    sentiment = market_conditions.get('market_sentiment', 'Unknown')
                    sentiment_color = {
                        'Bullish': 'üü¢',
                        'Bearish': 'üî¥',
                        'Neutral': 'üü°'
                    }.get(sentiment, '‚ö™')
                    
                    st.metric("–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ä—ã–Ω–∫–∞", f"{sentiment_color} {sentiment}")
                    st.metric("–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–æ–≤", market_conditions.get('total_symbols', 0))
                
                with col2:
                    gainers = market_conditions.get('gainers', 0)
                    losers = market_conditions.get('losers', 0)
                    total = gainers + losers
                    
                    if total > 0:
                        gainers_pct = (gainers / total) * 100
                        st.metric("üìà –†–∞—Å—Ç—É—â–∏–µ –∞–∫—Ç–∏–≤—ã", f"{gainers} ({gainers_pct:.1f}%)")
                        st.metric("üìâ –ü–∞–¥–∞—é—â–∏–µ –∞–∫—Ç–∏–≤—ã", f"{losers} ({100-gainers_pct:.1f}%)")
                    
                    avg_change = market_conditions.get('avg_change_pct', 0)
                    st.metric("–°—Ä–µ–¥–Ω–∏–π —Ä–æ—Å—Ç", f"{avg_change:+.2f}%")
            else:
                st.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π")
        
        with tab2:
            if top_gainers:
                df_gainers = pd.DataFrame(top_gainers[:10])
                if not df_gainers.empty:
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    display_df = df_gainers[['symbol', 'lastPrice', 'priceChangePercent', 'volume']].copy()
                    display_df.columns = ['–°–∏–º–≤–æ–ª', '–¶–µ–Ω–∞', '–†–æ—Å—Ç %', '–û–±—ä–µ–º']
                    display_df['–†–æ—Å—Ç %'] = display_df['–†–æ—Å—Ç %'].astype(float).round(2)
                    display_df['–¶–µ–Ω–∞'] = display_df['–¶–µ–Ω–∞'].astype(float)
                    
                    # –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞ –¥–ª—è —Ä–æ—Å—Ç–∞
                    def color_negative_red(val):
                        color = 'red' if val < 0 else 'green'
                        return f'color: {color}'
                    
                    styled_df = display_df.style.applymap(color_negative_red, subset=['–†–æ—Å—Ç %'])
                    st.dataframe(styled_df, use_container_width=True)
            else:
                st.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–ø –∞–∫—Ç–∏–≤–æ–≤")
        
        with tab3:
            if volume_leaders:
                df_volume = pd.DataFrame(volume_leaders[:10])
                if not df_volume.empty:
                    display_df = df_volume[['symbol', 'lastPrice', 'volume', 'quoteVolume']].copy()
                    display_df.columns = ['–°–∏–º–≤–æ–ª', '–¶–µ–Ω–∞', '–û–±—ä–µ–º', '–û–±—ä–µ–º USDT']
                    display_df['–¶–µ–Ω–∞'] = display_df['–¶–µ–Ω–∞'].astype(float)
                    display_df['–û–±—ä–µ–º'] = display_df['–û–±—ä–µ–º'].astype(float).apply(lambda x: f"{x:,.0f}")
                    display_df['–û–±—ä–µ–º USDT'] = display_df['–û–±—ä–µ–º USDT'].astype(float).apply(lambda x: f"${x:,.0f}")
                    
                    st.dataframe(display_df, use_container_width=True)
            else:
                st.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ –æ–±—ä–µ–º–∞–º")
    
    except Exception as e:
        logger.error(f"Error showing live market data: {str(e)}")
        st.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")

def show_live_balance():
    """–†–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞"""
    
    st.markdown("### üí∞ –†–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å")
    
    try:
        account_info = st.session_state.live_mexc_client.get_account_info()
        
        if 'error' not in account_info and 'balances' in account_info:
            total_balance_usdt = 0
            significant_balances = []
            
            for balance in account_info['balances']:
                asset = balance['asset']
                free = float(balance['free'])
                locked = float(balance['locked'])
                total = free + locked
                
                if total > 0:
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ USDT –¥–ª—è –æ–±—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞
                    if asset == 'USDT':
                        balance_usdt = total
                    else:
                        try:
                            ticker = st.session_state.live_mexc_client.get_ticker_price(f"{asset}USDT")
                            if 'error' not in ticker:
                                price = float(ticker.get('price', 0))
                                balance_usdt = total * price
                            else:
                                balance_usdt = 0
                        except:
                            balance_usdt = 0
                    
                    total_balance_usdt += balance_usdt
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–∏–º—ã–µ –±–∞–ª–∞–Ω—Å—ã (> $1)
                    if balance_usdt > 1:
                        significant_balances.append({
                            'asset': asset,
                            'free': free,
                            'locked': locked,
                            'total': total,
                            'balance_usdt': balance_usdt
                        })
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å
            st.metric("üíµ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å", f"${total_balance_usdt:,.2f}")
            
            # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –∞–∫—Ç–∏–≤–∞–º
            if significant_balances:
                st.markdown("**–ê–∫—Ç–∏–≤—ã —Å –±–∞–ª–∞–Ω—Å–æ–º > $1:**")
                
                for balance in sorted(significant_balances, key=lambda x: x['balance_usdt'], reverse=True):
                    with st.container():
                        col1, col2, col3 = st.columns(3)
                        
                        with col1:
                            st.write(f"**{balance['asset']}**")
                        
                        with col2:
                            if balance['asset'] == 'USDT':
                                st.write(f"–í—Å–µ–≥–æ: ${balance['total']:.2f}")
                                st.write(f"–î–æ—Å—Ç—É–ø–Ω–æ: ${balance['free']:.2f}")
                            else:
                                st.write(f"–í—Å–µ–≥–æ: {balance['total']:.6f}")
                                st.write(f"–î–æ—Å—Ç—É–ø–Ω–æ: {balance['free']:.6f}")
                        
                        with col3:
                            st.write(f"–°—Ç–æ–∏–º–æ—Å—Ç—å: ${balance['balance_usdt']:.2f}")
                            if balance['locked'] > 0:
                                st.write(f"–í –æ—Ä–¥–µ—Ä–∞—Ö: {balance['locked']:.6f}")
                        
                        st.divider()
            else:
                st.info("–ù–µ—Ç –∑–Ω–∞—á–∏–º—ã—Ö –±–∞–ª–∞–Ω—Å–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        else:
            st.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –±–∞–ª–∞–Ω—Å–∞")
    
    except Exception as e:
        logger.error(f"Error showing live balance: {str(e)}")
        st.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–ª–∞–Ω—Å–∞")

def show_live_positions():
    """–†–µ–∞–ª—å–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏"""
    
    st.markdown("### üìä –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞
        open_orders = st.session_state.live_mexc_client.get_open_orders()
        
        if 'error' not in open_orders and open_orders:
            st.markdown("**–û—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞:**")
            
            for order in open_orders[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ 10 –æ—Ä–¥–µ—Ä–æ–≤
                with st.container():
                    col1, col2, col3 = st.columns(3)
                    
                    with col1:
                        st.write(f"**{order.get('symbol', 'Unknown')}**")
                        side_emoji = "üìà" if order.get('side') == 'BUY' else "üìâ"
                        st.write(f"{side_emoji} {order.get('side', 'Unknown')}")
                    
                    with col2:
                        st.write(f"–¢–∏–ø: {order.get('type', 'Unknown')}")
                        st.write(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {float(order.get('origQty', 0)):,.6f}")
                    
                    with col3:
                        st.write(f"–¶–µ–Ω–∞: ${float(order.get('price', 0)):,.6f}")
                        st.write(f"–°—Ç–∞—Ç—É—Å: {order.get('status', 'Unknown')}")
                    
                    # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞
                    if st.button(f"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", key=f"cancel_{order.get('orderId')}"):
                        try:
                            result = st.session_state.live_mexc_client.cancel_order(
                                order.get('symbol'), order.get('orderId')
                            )
                            if 'error' not in result:
                                st.success("‚úÖ –û—Ä–¥–µ—Ä –æ—Ç–º–µ–Ω–µ–Ω")
                                st.rerun()
                            else:
                                st.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã: {result.get('error')}")
                        except Exception as e:
                            st.error(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
                    
                    st.divider()
        else:
            st.info("–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤")
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –æ—Ç AI —Ç—Ä–µ–π–¥–µ—Ä–æ–≤
        ai_positions = st.session_state.live_intelligent_trader.active_positions
        
        if ai_positions:
            st.markdown("**AI –ø–æ–∑–∏—Ü–∏–∏:**")
            
            for symbol, position in ai_positions.items():
                with st.container():
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
                    try:
                        ticker = st.session_state.live_mexc_client.get_ticker_price(symbol)
                        if 'error' not in ticker:
                            current_price = float(ticker['price'])
                        else:
                            current_price = position['entry_price']
                    except:
                        current_price = position['entry_price']
                    
                    # –†–∞—Å—á–µ—Ç P&L
                    entry_price = position['entry_price']
                    quantity = position['quantity']
                    side = position['side']
                    
                    if side == 'BUY':
                        unrealized_pnl = (current_price - entry_price) * quantity
                    else:
                        unrealized_pnl = (entry_price - current_price) * quantity
                    
                    pnl_pct = (unrealized_pnl / (entry_price * quantity)) * 100
                    
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        st.write(f"**{symbol}** (AI)")
                        side_emoji = "üìà" if side == 'BUY' else "üìâ"
                        st.write(f"{side_emoji} {side} {quantity:.6f}")
                    
                    with col2:
                        st.write(f"–í—Ö–æ–¥: ${entry_price:.6f}")
                        pnl_color = "üü¢" if unrealized_pnl >= 0 else "üî¥"
                        st.write(f"{pnl_color} P&L: ${unrealized_pnl:+.2f} ({pnl_pct:+.2f}%)")
                    
                    st.divider()
        
        if not open_orders and not ai_positions:
            st.info("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π")
    
    except Exception as e:
        logger.error(f"Error showing live positions: {str(e)}")
        st.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–∑–∏—Ü–∏–π")

def show_live_performance():
    """–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    
    st.markdown("### üìà –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç AI —Ç—Ä–µ–π–¥–µ—Ä–∞
        stats = st.session_state.live_intelligent_trader.get_performance_stats()
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        col1, col2 = st.columns(2)
        
        with col1:
            st.metric("üéØ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫", stats.get('total_trades', 0))
            st.metric("üí∞ –û–±—â–∏–π P&L", f"${stats.get('total_pnl', 0):+.2f}")
        
        with col2:
            win_rate = stats.get('win_rate', 0)
            st.metric("üìä –í–∏–Ω—Ä–µ–π—Ç", f"{win_rate:.1f}%")
            avg_pnl = stats.get('average_pnl', 0)
            st.metric("üìä –°—Ä–µ–¥–Ω–∏–π P&L", f"${avg_pnl:+.2f}")
        
        # –ì—Ä–∞—Ñ–∏–∫ –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫
        trade_history = st.session_state.live_intelligent_trader.trade_history
        
        if trade_history and len(trade_history) > 1:
            df_trades = pd.DataFrame(trade_history)
            df_trades['cumulative_pnl'] = df_trades['pnl'].cumsum()
            df_trades['trade_number'] = range(1, len(df_trades) + 1)
            
            fig = go.Figure()
            fig.add_trace(go.Scatter(
                x=df_trades['trade_number'],
                y=df_trades['cumulative_pnl'],
                mode='lines+markers',
                name='–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π P&L',
                line=dict(color='#00D4AA', width=2),
                marker=dict(size=4)
            ))
            
            fig.update_layout(
                title="–ö—Ä–∏–≤–∞—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ P&L",
                xaxis_title="–ù–æ–º–µ—Ä —Å–¥–µ–ª–∫–∏",
                yaxis_title="P&L (USDT)",
                height=300
            )
            
            st.plotly_chart(fig, use_container_width=True)
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏
            st.markdown("**–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–¥–µ–ª–æ–∫:**")
            recent_trades = trade_history[-5:]
            
            for trade in reversed(recent_trades):
                col1, col2, col3, col4 = st.columns(4)
                
                with col1:
                    st.write(f"**{trade['symbol']}**")
                
                with col2:
                    side_emoji = "üìà" if trade['side'] == 'BUY' else "üìâ"
                    st.write(f"{side_emoji} {trade['side']}")
                
                with col3:
                    pnl_color = "üü¢" if trade['pnl'] >= 0 else "üî¥"
                    st.write(f"{pnl_color} ${trade['pnl']:+.2f}")
                
                with col4:
                    st.write(f"‚è∞ {trade['exit_time'].strftime('%m/%d %H:%M')}")
        else:
            st.info("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞")
    
    except Exception as e:
        logger.error(f"Error showing live performance: {str(e)}")
        st.error("–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")

# –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
if 'live_data_last_update' not in st.session_state:
    st.session_state.live_data_last_update = datetime.now()

if (datetime.now() - st.session_state.live_data_last_update).total_seconds() > 30:
    st.session_state.live_data_last_update = datetime.now()
    # –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–µ
    if st.session_state.get('live_auto_trading', False):
        st.rerun()
