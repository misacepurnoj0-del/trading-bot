import streamlit as st
import pandas as pd
import plotly.graph_objects as go
import plotly.express as px
from datetime import datetime, timedelta
import time

from trading.advanced_trader import AdvancedTrader
from signals.signal_generator import SignalGenerator
from auth.security import SecureDataManager
from utils.logger import get_logger

logger = get_logger(__name__)

def show():
    """Display the trading panel"""
    try:
        st.title("üìà –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞–Ω–µ–ª—å")
        
        # Initialize components
        if 'trader' not in st.session_state:
            api_key, secret_key = SecureDataManager.get_api_keys()
            demo_mode = st.session_state.get('demo_mode', True)
            st.session_state.trader = AdvancedTrader(api_key, secret_key, demo_mode)
        
        if 'signal_generator' not in st.session_state:
            st.session_state.signal_generator = SignalGenerator()
        
        trader = st.session_state.trader
        signal_generator = st.session_state.signal_generator
        
        # Main trading interface
        tab1, tab2, tab3, tab4 = st.tabs(["üéØ –°–∏–≥–Ω–∞–ª—ã", "‚ö° –ë—ã—Å—Ç—Ä–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è", "üîç –ê–Ω–∞–ª–∏–∑ —Å–∏–º–≤–æ–ª–∞", "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏—è–º–∏"])
        
        with tab1:
            show_trading_signals(trader, signal_generator)
        
        with tab2:
            show_quick_trading(trader)
        
        with tab3:
            show_symbol_analysis(trader, signal_generator)
        
        with tab4:
            show_position_management(trader)
        
    except Exception as e:
        logger.error(f"Error in trading panel: {str(e)}")
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏: {str(e)}")

def show_trading_signals(trader, signal_generator):
    """Display trading signals"""
    try:
        st.markdown("### üéØ –¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã")
        
        # Signal generation controls
        col1, col2, col3 = st.columns([2, 1, 1])
        
        with col1:
            confidence_threshold = st.slider("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Å–∏–≥–Ω–∞–ª–∞", 50, 95, 70, step=5)
        
        with col2:
            if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–∏–≥–Ω–∞–ª—ã", use_container_width=True):
                signal_generator.clear_cache()
                st.rerun()
        
        with col3:
            auto_trade = st.checkbox("ü§ñ –ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è", help="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å —Å–∏–≥–Ω–∞–ª—ã —Å –≤—ã—Å–æ–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é")
        
        # Generate signals
        with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤..."):
            opportunities = trader.scan_for_opportunities(limit=30)
        
        if opportunities:
            # Filter by confidence
            filtered_signals = [opp for opp in opportunities if opp['confidence'] >= confidence_threshold]
            
            if filtered_signals:
                st.success(f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(filtered_signals)} —Å–∏–≥–Ω–∞–ª–æ–≤")
                
                # Signals table with actions
                for i, signal in enumerate(filtered_signals[:10]):
                    with st.container():
                        col1, col2, col3, col4, col5, col6 = st.columns([2, 1, 1, 1, 2, 1])
                        
                        with col1:
                            st.write(f"**{signal['symbol']}**")
                            st.caption(f"${float(signal['current_price']):.6f}")
                        
                        with col2:
                            action_color = "üü¢" if signal['action'] == 'BUY' else "üî¥" if signal['action'] == 'SELL' else "üü°"
                            st.write(f"{action_color} {signal['action']}")
                        
                        with col3:
                            confidence = signal['confidence']
                            confidence_color = "üü¢" if confidence >= 80 else "üü°" if confidence >= 65 else "üî¥"
                            st.write(f"{confidence_color} {confidence:.1f}%")
                        
                        with col4:
                            change_24h = float(signal['change_24h'])
                            change_color = "üü¢" if change_24h > 0 else "üî¥"
                            st.write(f"{change_color} {change_24h:+.2f}%")
                        
                        with col5:
                            st.caption(signal['reasoning'])
                        
                        with col6:
                            button_key = f"trade_{signal['symbol']}_{i}"
                            if st.button("‚ñ∂Ô∏è", key=button_key, help="–í—ã–ø–æ–ª–Ω–∏—Ç—å —Å–∏–≥–Ω–∞–ª"):
                                execute_trade_from_signal(trader, signal)
                        
                        st.divider()
                
                # Auto-trading for high confidence signals
                if auto_trade:
                    high_confidence_signals = [s for s in filtered_signals if s['confidence'] >= 85]
                    
                    if high_confidence_signals:
                        st.info(f"ü§ñ –ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è: –ù–∞–π–¥–µ–Ω–æ {len(high_confidence_signals)} —Å–∏–≥–Ω–∞–ª–æ–≤ —Å –≤—ã—Å–æ–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é")
                        
                        for signal in high_confidence_signals[:3]:  # Limit auto trades
                            try:
                                result = execute_trade_from_signal(trader, signal, auto_mode=True)
                                if result.get('success'):
                                    st.success(f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω {signal['action']} {signal['symbol']}")
                                else:
                                    st.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—é –¥–ª—è {signal['symbol']}: {result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                            except Exception as e:
                                logger.error(f"Auto-trade error for {signal['symbol']}: {str(e)}")
            else:
                st.warning(f"–ù–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ —Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é ‚â• {confidence_threshold}%")
        else:
            st.info("üîç –¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    except Exception as e:
        logger.error(f"Error in trading signals: {str(e)}")
        st.error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")

def show_quick_trading(trader):
    """Display quick trading interface"""
    try:
        st.markdown("### ‚ö° –ë—ã—Å—Ç—Ä–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è")
        
        # Trading form
        with st.form("quick_trade_form"):
            col1, col2 = st.columns(2)
            
            with col1:
                symbol = st.text_input("–°–∏–º–≤–æ–ª", placeholder="BTCUSDT", help="–í–≤–µ–¥–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª")
                action = st.selectbox("–î–µ–π—Å—Ç–≤–∏–µ", ["BUY", "SELL"])
            
            with col2:
                trade_amount = st.number_input("–°—É–º–º–∞ ($)", min_value=10.0, max_value=10000.0, value=100.0, step=10.0)
                use_leverage = st.checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–ª–µ—á–æ", help="–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∫—Ä–µ–¥–∏—Ç–Ω–æ–µ –ø–ª–µ—á–æ –¥–ª—è —Å–¥–µ–ª–∫–∏")
            
            # Advanced options
            with st.expander("üîß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"):
                col1, col2 = st.columns(2)
                
                with col1:
                    stop_loss_pct = st.number_input("–°—Ç–æ–ø-–ª–æ—Å—Å (%)", min_value=1.0, max_value=20.0, value=5.0, step=0.5)
                    take_profit_pct = st.number_input("–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç (%)", min_value=1.0, max_value=50.0, value=10.0, step=0.5)
                
                with col2:
                    if use_leverage:
                        leverage = st.slider("–ü–ª–µ—á–æ", 1.0, 5.0, 2.0, step=0.5)
                    else:
                        leverage = 1.0
                    
                    order_type = st.selectbox("–¢–∏–ø –æ—Ä–¥–µ—Ä–∞", ["MARKET", "LIMIT"])
            
            # Submit button
            submitted = st.form_submit_button("üöÄ –í—ã–ø–æ–ª–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É", use_container_width=True)
            
            if submitted and symbol:
                execute_manual_trade(trader, symbol, action, trade_amount, leverage, stop_loss_pct, take_profit_pct, order_type)
        
        st.markdown("---")
        
        # Quick market data
        if st.checkbox("üìä –ü–æ–∫–∞–∑–∞—Ç—å —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"):
            show_quick_market_data(trader)
    
    except Exception as e:
        logger.error(f"Error in quick trading: {str(e)}")
        st.error("–û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏")

def show_symbol_analysis(trader, signal_generator):
    """Display detailed symbol analysis"""
    try:
        st.markdown("### üîç –ê–Ω–∞–ª–∏–∑ —Å–∏–º–≤–æ–ª–∞")
        
        # Symbol input
        col1, col2 = st.columns([3, 1])
        
        with col1:
            symbol = st.text_input("–°–∏–º–≤–æ–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞", placeholder="BTCUSDT")
        
        with col2:
            if st.button("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å", use_container_width=True):
                if symbol:
                    st.session_state.analysis_symbol = symbol
                    st.rerun()
        
        # Perform analysis if symbol is provided
        analysis_symbol = st.session_state.get('analysis_symbol', '')
        
        if analysis_symbol:
            st.markdown(f"#### üìä –ê–Ω–∞–ª–∏–∑ {analysis_symbol}")
            
            try:
                # Get market data
                with st.spinner("–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö..."):
                    klines_data = trader.mexc_client.get_klines(analysis_symbol, '1h', 100)
                
                if 'error' in klines_data:
                    st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {klines_data['error']}")
                    return
                
                # Convert to DataFrame
                df = trader._convert_klines_to_df(klines_data)
                
                if len(df) < 20:
                    st.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                    return
                
                # Generate detailed analysis
                with st.spinner("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞..."):
                    analysis_result = trader.analyze_symbol(analysis_symbol)
                    signal = signal_generator.generate_trading_signal(analysis_symbol, df)
                
                # Display results
                col1, col2 = st.columns(2)
                
                with col1:
                    st.markdown("##### üìà –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª")
                    
                    if signal:
                        action = signal['action']
                        confidence = signal['confidence']
                        
                        action_color = "üü¢" if action == 'BUY' else "üî¥" if action == 'SELL' else "üü°"
                        confidence_color = "üü¢" if confidence >= 80 else "üü°" if confidence >= 65 else "üî¥"
                        
                        st.metric("–î–µ–π—Å—Ç–≤–∏–µ", f"{action_color} {action}")
                        st.metric("–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", f"{confidence_color} {confidence:.1f}%")
                        st.metric("–°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞", signal.get('strength', 'Unknown'))
                        st.metric("–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞", signal.get('risk_level', 'Unknown'))
                        
                        st.markdown("**–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:**")
                        st.write(signal.get('reasoning', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'))
                    else:
                        st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–∏–≥–Ω–∞–ª")
                
                with col2:
                    st.markdown("##### üî¢ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")
                    
                    if signal and 'components' in signal:
                        components = signal['components']
                        
                        for component, score in components.items():
                            component_name = {
                                'technical_score': '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑',
                                'price_action_score': '–¶–µ–Ω–æ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ',
                                'volume_score': '–ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–æ–≤',
                                'sentiment_score': '–ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π'
                            }.get(component, component)
                            
                            st.metric(component_name, f"{score:.1f}/100")
                
                # Price chart
                st.markdown("##### üìä –ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã")
                
                fig = go.Figure()
                
                # Candlestick chart
                fig.add_trace(go.Candlestick(
                    x=df.index,
                    open=df['open'],
                    high=df['high'],
                    low=df['low'],
                    close=df['close'],
                    name=analysis_symbol
                ))
                
                # Add moving averages
                sma_20 = df['close'].rolling(20).mean()
                sma_50 = df['close'].rolling(50).mean()
                
                fig.add_trace(go.Scatter(x=df.index, y=sma_20, name='SMA 20', line=dict(color='orange')))
                fig.add_trace(go.Scatter(x=df.index, y=sma_50, name='SMA 50', line=dict(color='red')))
                
                fig.update_layout(
                    title=f"{analysis_symbol} - –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω—ã",
                    xaxis_title="–í—Ä–µ–º—è",
                    yaxis_title="–¶–µ–Ω–∞ ($)",
                    height=500
                )
                
                st.plotly_chart(fig, use_container_width=True)
                
                # Execute trade button
                if signal and signal['confidence'] >= 65:
                    st.markdown("##### ‚ö° –í—ã–ø–æ–ª–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É")
                    
                    col1, col2, col3 = st.columns(3)
                    
                    with col1:
                        trade_amount = st.number_input("–°—É–º–º–∞ —Å–¥–µ–ª–∫–∏ ($)", min_value=10.0, value=100.0, step=10.0)
                    
                    with col2:
                        use_signal_leverage = st.checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–ª–µ—á–æ", value=signal['confidence'] >= 85)
                    
                    with col3:
                        if st.button("üöÄ –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ —Å–∏–≥–Ω–∞–ª—É", use_container_width=True):
                            execute_trade_from_analysis(trader, analysis_symbol, signal, trade_amount, use_signal_leverage)
            
            except Exception as e:
                logger.error(f"Error in symbol analysis: {str(e)}")
                st.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–∏–º–≤–æ–ª–∞: {str(e)}")
    
    except Exception as e:
        logger.error(f"Error in symbol analysis interface: {str(e)}")
        st.error("–û—à–∏–±–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–∏–º–≤–æ–ª–∞")

def show_position_management(trader):
    """Display position management interface"""
    try:
        st.markdown("### ‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏—è–º–∏")
        
        # Get current positions
        positions = trader.trading_history.get_current_positions()
        
        if positions:
            st.success(f"üìä –û—Ç–∫—Ä—ã—Ç–æ –ø–æ–∑–∏—Ü–∏–π: {len(positions)}")
            
            # Position management for each position
            for i, position in enumerate(positions):
                with st.expander(f"üìà {position.symbol} - {position.side}", expanded=True):
                    col1, col2, col3 = st.columns(3)
                    
                    with col1:
                        st.metric("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", f"{position.quantity:.4f}")
                        st.metric("–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞", f"${position.entry_price:.6f}")
                    
                    with col2:
                        st.metric("–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞", f"${position.current_price:.6f}")
                        st.metric("–í—Ä–µ–º—è –≤—Ö–æ–¥–∞", position.entry_time.strftime('%Y-%m-%d %H:%M'))
                    
                    with col3:
                        pnl_color = "üü¢" if position.unrealized_pnl_pct > 0 else "üî¥"
                        st.metric("–ü/–£ %", f"{pnl_color} {position.unrealized_pnl_pct:+.2f}%")
                        st.metric("–ü/–£ $", f"${position.unrealized_pnl:+.2f}")
                    
                    # Position actions
                    col1, col2, col3, col4 = st.columns(4)
                    
                    with col1:
                        if st.button(f"üí∞ –ó–∞–∫—Ä—ã—Ç—å", key=f"close_{i}"):
                            close_position(trader, position)
                    
                    with col2:
                        if st.button(f"üìä –ê–Ω–∞–ª–∏–∑", key=f"analyze_{i}"):
                            st.session_state.analysis_symbol = position.symbol
                            st.rerun()
                    
                    with col3:
                        if position.unrealized_pnl_pct > 10:
                            if st.button(f"üéØ –ß–∞—Å—Ç–∏—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ", key=f"partial_{i}"):
                                partial_close_position(trader, position, 0.5)
                    
                    with col4:
                        if position.unrealized_pnl_pct < -5:
                            if st.button(f"‚ö†Ô∏è –°—Ç–æ–ø-–ª–æ—Å—Å", key=f"stop_{i}"):
                                close_position(trader, position, reason="–°—Ç–æ–ø-–ª–æ—Å—Å")
            
            # Bulk actions
            st.markdown("#### üîß –ú–∞—Å—Å–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è")
            
            col1, col2, col3 = st.columns(3)
            
            with col1:
                if st.button("üí∞ –ó–∞–∫—Ä—ã—Ç—å –≤—Å–µ –ø—Ä–∏–±—ã–ª—å–Ω—ã–µ", use_container_width=True):
                    close_profitable_positions(trader)
            
            with col2:
                if st.button("‚ö†Ô∏è –ó–∞–∫—Ä—ã—Ç—å –≤—Å–µ —É–±—ã—Ç–æ—á–Ω—ã–µ", use_container_width=True):
                    close_losing_positions(trader)
            
            with col3:
                if st.button("üö® –ó–∞–∫—Ä—ã—Ç—å –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏", use_container_width=True):
                    close_all_positions(trader)
        
        else:
            st.info("üì≠ –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π")
            
            if st.button("üéØ –ù–∞–π—Ç–∏ —Ç–æ—Ä–≥–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"):
                st.session_state.navigation = "üè† –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å"
                st.rerun()
        
        # Portfolio optimization
        st.markdown("---")
        st.markdown("#### üéØ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è")
        
        if hasattr(trader, 'optimize_portfolio'):
            optimization = trader.optimize_portfolio()
            
            if optimization.get('status') == 'analyzed':
                score = optimization.get('optimization_score', 0)
                
                col1, col2 = st.columns(2)
                
                with col1:
                    st.metric("–û—Ü–µ–Ω–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏", f"{score:.1f}/100")
                
                with col2:
                    if score < 70:
                        st.warning("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è")
                    else:
                        st.success("‚úÖ –ü–æ—Ä—Ç—Ñ–µ–ª—å —Ö–æ—Ä–æ—à–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω")
                
                # Show recommendations
                recommendations = optimization.get('recommendations', [])
                if recommendations:
                    st.markdown("**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:**")
                    for rec in recommendations:
                        st.write(f"‚Ä¢ {rec.get('reason', '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏')}")
    
    except Exception as e:
        logger.error(f"Error in position management: {str(e)}")
        st.error("–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏—è–º–∏")

# Helper functions

def execute_trade_from_signal(trader, signal, auto_mode=False):
    """Execute trade based on signal"""
    try:
        symbol = signal['symbol']
        action = signal['action']
        confidence = signal['confidence']
        reasoning = signal['reasoning']
        
        result = trader.execute_trade(symbol, action, confidence, reasoning)
        
        if not auto_mode:
            if result.get('success'):
                st.success(f"‚úÖ –°–¥–µ–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {action} {symbol}")
                st.info(f"ID —Å–¥–µ–ª–∫–∏: {result.get('trade_id')}")
                time.sleep(2)
                st.rerun()
            else:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏: {result.get('message')}")
        
        return result
        
    except Exception as e:
        logger.error(f"Error executing trade from signal: {str(e)}")
        if not auto_mode:
            st.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏: {str(e)}")
        return {'success': False, 'message': str(e)}

def execute_manual_trade(trader, symbol, action, amount, leverage, stop_loss_pct, take_profit_pct, order_type):
    """Execute manual trade"""
    try:
        # Get current price
        ticker = trader.mexc_client.get_ticker_price(symbol)
        if 'error' in ticker:
            st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã: {ticker['error']}")
            return
        
        current_price = float(ticker.get('price', 0))
        if current_price <= 0:
            st.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞ —Å–∏–º–≤–æ–ª–∞")
            return
        
        # Calculate quantity
        effective_amount = amount * leverage
        quantity = effective_amount / current_price
        
        # Create synthetic signal for execution
        signal = {
            'symbol': symbol,
            'action': action,
            'confidence': 75.0,  # Manual trades get default confidence
            'reasoning': f"–†—É—á–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è: {action} {symbol} –Ω–∞ —Å—É–º–º—É ${amount} —Å –ø–ª–µ—á–æ–º {leverage}x"
        }
        
        result = execute_trade_from_signal(trader, signal)
        
        if result.get('success'):
            st.success(f"‚úÖ –†—É—á–Ω–∞—è —Å–¥–µ–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")
            st.info(f"–°–∏–º–≤–æ–ª: {symbol}, –î–µ–π—Å—Ç–≤–∏–µ: {action}, –°—É–º–º–∞: ${amount}, –ü–ª–µ—á–æ: {leverage}x")
        
    except Exception as e:
        logger.error(f"Error in manual trade: {str(e)}")
        st.error(f"–û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏: {str(e)}")

def execute_trade_from_analysis(trader, symbol, signal, amount, use_leverage):
    """Execute trade from detailed analysis"""
    try:
        leverage = 2.0 if use_leverage and signal['confidence'] >= 85 else 1.0
        
        # Update signal reasoning with amount and leverage info
        signal['reasoning'] += f" | –°—É–º–º–∞: ${amount}, –ü–ª–µ—á–æ: {leverage}x"
        
        result = execute_trade_from_signal(trader, signal)
        
        if result.get('success'):
            st.balloons()
            st.success(f"üéâ –°–¥–µ–ª–∫–∞ –ø–æ –∞–Ω–∞–ª–∏–∑—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        logger.error(f"Error executing trade from analysis: {str(e)}")
        st.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏ –ø–æ –∞–Ω–∞–ª–∏–∑—É: {str(e)}")

def close_position(trader, position, reason="–†—É—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ"):
    """Close a specific position"""
    try:
        # Find corresponding trade
        open_trades = trader.trading_history.get_open_trades()
        trade = next((t for t in open_trades if t.symbol == position.symbol), None)
        
        if trade:
            result = trader._close_position(trade, reason)
            
            if result.get('action') == 'closed':
                profit_pct = result.get('profit_pct', 0)
                profit_emoji = "üìà" if profit_pct > 0 else "üìâ"
                st.success(f"{profit_emoji} –ü–æ–∑–∏—Ü–∏—è {position.symbol} –∑–∞–∫—Ä—ã—Ç–∞: {profit_pct:+.2f}%")
                time.sleep(1)
                st.rerun()
            else:
                st.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏: {result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        else:
            st.error("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è —Å–¥–µ–ª–∫–∞")
            
    except Exception as e:
        logger.error(f"Error closing position: {str(e)}")
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏: {str(e)}")

def partial_close_position(trader, position, close_ratio=0.5):
    """Partially close a position"""
    try:
        st.info(f"–ß–∞—Å—Ç–∏—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ {close_ratio:.0%} –ø–æ–∑–∏—Ü–∏–∏ {position.symbol}")
        # This would require more complex implementation
        # For now, just show info
        st.warning("–§—É–Ω–∫—Ü–∏—è —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        
    except Exception as e:
        logger.error(f"Error in partial close: {str(e)}")
        st.error(f"–û—à–∏–±–∫–∞ —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è: {str(e)}")

def close_profitable_positions(trader):
    """Close all profitable positions"""
    try:
        positions = trader.trading_history.get_current_positions()
        profitable_positions = [p for p in positions if p.unrealized_pnl_pct > 0]
        
        if profitable_positions:
            for position in profitable_positions:
                close_position(trader, position, "–ú–∞—Å—Å–æ–≤–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö")
            
            st.success(f"‚úÖ –ó–∞–∫—Ä—ã—Ç–æ {len(profitable_positions)} –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π")
        else:
            st.info("–ù–µ—Ç –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è")
    
    except Exception as e:
        logger.error(f"Error closing profitable positions: {str(e)}")
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {str(e)}")

def close_losing_positions(trader):
    """Close all losing positions"""
    try:
        positions = trader.trading_history.get_current_positions()
        losing_positions = [p for p in positions if p.unrealized_pnl_pct < 0]
        
        if losing_positions:
            for position in losing_positions:
                close_position(trader, position, "–ú–∞—Å—Å–æ–≤–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —É–±—ã—Ç–æ—á–Ω—ã—Ö")
            
            st.warning(f"‚ö†Ô∏è –ó–∞–∫—Ä—ã—Ç–æ {len(losing_positions)} —É–±—ã—Ç–æ—á–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π")
        else:
            st.info("–ù–µ—Ç —É–±—ã—Ç–æ—á–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è")
    
    except Exception as e:
        logger.error(f"Error closing losing positions: {str(e)}")
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —É–±—ã—Ç–æ—á–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {str(e)}")

def close_all_positions(trader):
    """Close all positions"""
    try:
        positions = trader.trading_history.get_current_positions()
        
        if positions:
            # Confirm action
            if st.button("üö® –ü–û–î–¢–í–ï–†–î–ò–¢–¨ –ó–ê–ö–†–´–¢–ò–ï –í–°–ï–• –ü–û–ó–ò–¶–ò–ô", type="primary"):
                for position in positions:
                    close_position(trader, position, "–ú–∞—Å—Å–æ–≤–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π")
                
                st.success(f"‚úÖ –ó–∞–∫—Ä—ã—Ç–æ {len(positions)} –ø–æ–∑–∏—Ü–∏–π")
        else:
            st.info("–ù–µ—Ç –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è")
    
    except Exception as e:
        logger.error(f"Error closing all positions: {str(e)}")
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π: {str(e)}")

def show_quick_market_data(trader):
    """Show quick market data overview"""
    try:
        st.markdown("#### üìä –ë—ã—Å—Ç—Ä—ã–µ —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        
        # Get top gainers and losers
        with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö..."):
            gainers = trader.mexc_client.get_top_gainers_losers(10)
        
        if gainers:
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown("**üü¢ –¢–æ–ø —Ä–∞—Å—Ç—É—â–∏–µ**")
                for ticker in gainers[:5]:
                    change = float(ticker.get('priceChangePercent', 0))
                    if change > 0:
                        st.write(f"{ticker['symbol']}: +{change:.2f}%")
            
            with col2:
                st.markdown("**üî¥ –¢–æ–ø –ø–∞–¥–∞—é—â–∏–µ**")
                sorted_tickers = sorted(gainers, key=lambda x: float(x.get('priceChangePercent', 0)))
                for ticker in sorted_tickers[:5]:
                    change = float(ticker.get('priceChangePercent', 0))
                    if change < 0:
                        st.write(f"{ticker['symbol']}: {change:.2f}%")
        
    except Exception as e:
        logger.error(f"Error in quick market data: {str(e)}")
        st.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
