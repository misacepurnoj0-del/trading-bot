import streamlit as st
import time
from typing import Dict

from auth.security import SecureDataManager
from trading.advanced_trader import AdvancedTrader
from utils.logger import get_logger

logger = get_logger(__name__)

def show():
    """Display settings page"""
    try:
        st.title("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        # Settings tabs
        tab1, tab2, tab3, tab4, tab5 = st.tabs([
            "üîë API –∫–ª—é—á–∏", 
            "üéõÔ∏è –¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", 
            "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", 
            "üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", 
            "üìä –°–∏—Å—Ç–µ–º–∞"
        ])
        
        with tab1:
            show_api_settings()
        
        with tab2:
            show_trading_settings()
        
        with tab3:
            show_notification_settings()
        
        with tab4:
            show_security_settings()
        
        with tab5:
            show_system_settings()
    
    except Exception as e:
        logger.error(f"Error in settings page: {str(e)}")
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {str(e)}")

def show_api_settings():
    """Display API settings"""
    try:
        st.markdown("### üîë –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–µ–π")
        
        # Current API key status
        api_key, secret_key = SecureDataManager.get_api_keys()
        
        col1, col2 = st.columns(2)
        
        with col1:
            if api_key and secret_key:
                st.success("‚úÖ API –∫–ª—é—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
                st.info(f"API Key: {api_key[:8]}{'*' * (len(api_key) - 8) if len(api_key) > 8 else ''}")
                st.info(f"Secret Key: {'*' * 16}")
            else:
                st.warning("‚ö†Ô∏è API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
                st.error("–î–ª—è —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å API –∫–ª—é—á–∏ MEXC")
        
        with col2:
            st.markdown("#### üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
            st.write("""
            **–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á–∏ MEXC:**
            1. –í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ MEXC
            2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ API Management
            3. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π API –∫–ª—é—á
            4. –í–∫–ª—é—á–∏—Ç–µ –ø—Ä–∞–≤–∞ –Ω–∞ —Ç–æ—Ä–≥–æ–≤–ª—é
            5. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∫–ª—é—á–∏ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ
            """)
        
        st.markdown("---")
        
        # API key configuration form
        st.markdown("#### üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ API –∫–ª—é—á–µ–π")
        
        with st.form("api_keys_form"):
            new_api_key = st.text_input(
                "MEXC API Key",
                value="",
                type="password",
                help="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à API –∫–ª—é—á –æ—Ç MEXC"
            )
            
            new_secret_key = st.text_input(
                "MEXC Secret Key", 
                value="",
                type="password",
                help="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Secret –∫–ª—é—á –æ—Ç MEXC"
            )
            
            col1, col2, col3 = st.columns(3)
            
            with col1:
                save_keys = st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–ª—é—á–∏", use_container_width=True)
            
            with col2:
                test_keys = st.form_submit_button("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á–∏", use_container_width=True)
            
            with col3:
                clear_keys = st.form_submit_button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–ª—é—á–∏", use_container_width=True)
            
            if save_keys and new_api_key and new_secret_key:
                save_api_keys(new_api_key, new_secret_key)
            
            if test_keys and new_api_key and new_secret_key:
                test_api_keys(new_api_key, new_secret_key)
            
            if clear_keys:
                clear_api_keys()
        
        # Security warnings
        st.markdown("---")
        st.markdown("#### ‚ö†Ô∏è –í–∞–∂–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
        
        st.warning("""
        üîí **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å API –∫–ª—é—á–µ–π:**
        - –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ —Å–≤–æ–∏ API –∫–ª—é—á–∏ —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º
        - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ HTTPS —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        - –†–µ–≥—É–ª—è—Ä–Ω–æ –º–µ–Ω—è–π—Ç–µ API –∫–ª—é—á–∏
        - –û–≥—Ä–∞–Ω–∏—á—å—Ç–µ –ø—Ä–∞–≤–∞ API –∫–ª—é—á–µ–π —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
        - –°–ª–µ–¥–∏—Ç–µ –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é –Ω–∞ —Å–≤–æ–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ
        """)
        
        st.error("""
        üö® **–í–Ω–∏–º–∞–Ω–∏–µ:**
        - API –∫–ª—é—á–∏ –¥–∞—é—Ç –¥–æ—Å—Ç—É–ø –∫ –≤–∞—à–µ–º—É —Ç–æ—Ä–≥–æ–≤–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É
        - –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –ø–æ—Ç–µ—Ä—è–º
        - –í—Å–µ–≥–¥–∞ —Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –≤ –¥–µ–º–æ —Ä–µ–∂–∏–º–µ
        """)
    
    except Exception as e:
        logger.error(f"Error in API settings: {str(e)}")
        st.error("–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ API")

def show_trading_settings():
    """Display trading parameters settings"""
    try:
        st.markdown("### üéõÔ∏è –¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
        
        # Initialize trader if needed
        if 'trader' not in st.session_state:
            api_key, secret_key = SecureDataManager.get_api_keys()
            demo_mode = st.session_state.get('demo_mode', True)
            st.session_state.trader = AdvancedTrader(api_key, secret_key, demo_mode)
        
        trader = st.session_state.trader
        
        # Risk management settings
        st.markdown("#### üõ°Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏")
        
        col1, col2 = st.columns(2)
        
        with col1:
            max_positions = st.number_input(
                "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π",
                min_value=1,
                max_value=10,
                value=getattr(trader, 'max_positions', 3),
                step=1,
                help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π"
            )
            
            position_size_pct = st.slider(
                "–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ (% –æ—Ç –∫–∞–ø–∏—Ç–∞–ª–∞)",
                min_value=10.0,
                max_value=50.0,
                value=getattr(trader, 'position_size_pct', 33.33),
                step=1.0,
                help="–ü—Ä–æ—Ü–µ–Ω—Ç –∫–∞–ø–∏—Ç–∞–ª–∞ –Ω–∞ –æ–¥–Ω—É –ø–æ–∑–∏—Ü–∏—é"
            )
            
            max_leverage = st.slider(
                "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø–ª–µ—á–æ",
                min_value=1.0,
                max_value=10.0,
                value=getattr(trader, 'max_leverage', 5.0),
                step=0.5,
                help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫—Ä–µ–¥–∏—Ç–Ω–æ–µ –ø–ª–µ—á–æ"
            )
        
        with col2:
            min_confidence_threshold = st.slider(
                "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Å–∏–≥–Ω–∞–ª–∞ (%)",
                min_value=50.0,
                max_value=95.0,
                value=getattr(trader, 'min_confidence_threshold', 70.0),
                step=5.0,
                help="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏"
            )
            
            max_hold_time_hours = st.number_input(
                "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è (—á–∞—Å—ã)",
                min_value=1,
                max_value=720,  # 30 days
                value=getattr(trader, 'max_hold_time_hours', 168),  # 1 week
                step=1,
                help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏"
            )
            
            # Advanced risk settings (if available)
            if hasattr(trader, 'risk_per_trade'):
                risk_per_trade = st.slider(
                    "–†–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É (%)",
                    min_value=0.5,
                    max_value=5.0,
                    value=trader.risk_per_trade,
                    step=0.1,
                    help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫ –Ω–∞ –æ–¥–Ω—É —Å–¥–µ–ª–∫—É"
                )
                
                portfolio_heat = st.slider(
                    "–û–±—â–∏–π —Ä–∏—Å–∫ –ø–æ—Ä—Ç—Ñ–µ–ª—è (%)",
                    min_value=1.0,
                    max_value=15.0,
                    value=getattr(trader, 'portfolio_heat', 6.0),
                    step=0.5,
                    help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ–±—â–∏–π —Ä–∏—Å–∫ –ø–æ—Ä—Ç—Ñ–µ–ª—è"
                )
        
        # Indicator weights settings
        st.markdown("#### ‚öñÔ∏è –í–µ—Å–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")
        
        indicator_weights = getattr(trader, 'indicator_weights', {
            'technical': 0.35,
            'fundamental': 0.25,
            'sentiment': 0.20,
            'momentum': 0.20
        })
        
        col1, col2 = st.columns(2)
        
        with col1:
            technical_weight = st.slider(
                "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑",
                min_value=0.1,
                max_value=0.6,
                value=indicator_weights.get('technical', 0.35),
                step=0.05,
                help="–í–µ—Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –≤ –æ–±—â–µ–º —Å–∏–≥–Ω–∞–ª–µ"
            )
            
            fundamental_weight = st.slider(
                "–§—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑",
                min_value=0.1,
                max_value=0.6,
                value=indicator_weights.get('fundamental', 0.25),
                step=0.05,
                help="–í–µ—Å —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"
            )
        
        with col2:
            sentiment_weight = st.slider(
                "–ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π",
                min_value=0.1,
                max_value=0.6,
                value=indicator_weights.get('sentiment', 0.20),
                step=0.05,
                help="–í–µ—Å –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π"
            )
            
            momentum_weight = st.slider(
                "–ê–Ω–∞–ª–∏–∑ –º–æ–º–µ–Ω—Ç—É–º–∞",
                min_value=0.1,
                max_value=0.6,
                value=indicator_weights.get('momentum', 0.20),
                step=0.05,
                help="–í–µ—Å –∞–Ω–∞–ª–∏–∑–∞ –º–æ–º–µ–Ω—Ç—É–º–∞ –∏ –æ–±—ä–µ–º–æ–≤"
            )
        
        # Validate weights sum to 1.0
        total_weight = technical_weight + fundamental_weight + sentiment_weight + momentum_weight
        
        if abs(total_weight - 1.0) > 0.01:
            st.warning(f"‚ö†Ô∏è –°—É–º–º–∞ –≤–µ—Å–æ–≤ –¥–æ–ª–∂–Ω–∞ —Ä–∞–≤–Ω—è—Ç—å—Å—è 100%. –¢–µ–∫—É—â–∞—è —Å—É–º–º–∞: {total_weight:.1%}")
        else:
            st.success(f"‚úÖ –°—É–º–º–∞ –≤–µ—Å–æ–≤: {total_weight:.1%}")
        
        # Save settings button
        if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", use_container_width=True):
            save_trading_parameters(
                trader, max_positions, position_size_pct, max_leverage,
                min_confidence_threshold, max_hold_time_hours,
                {
                    'technical': technical_weight,
                    'fundamental': fundamental_weight,
                    'sentiment': sentiment_weight,
                    'momentum': momentum_weight
                }
            )
        
        # Reset to defaults
        if st.button("üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"):
            reset_trading_parameters(trader)
    
    except Exception as e:
        logger.error(f"Error in trading settings: {str(e)}")
        st.error("–û—à–∏–±–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫")

def show_notification_settings():
    """Display notification settings"""
    try:
        st.markdown("### üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        
        # Initialize notification manager
        if 'trader' not in st.session_state:
            api_key, secret_key = SecureDataManager.get_api_keys()
            demo_mode = st.session_state.get('demo_mode', True)
            st.session_state.trader = AdvancedTrader(api_key, secret_key, demo_mode)
        
        trader = st.session_state.trader
        notifications = trader.notifications
        
        # Current notification statistics
        col1, col2, col3 = st.columns(3)
        
        with col1:
            total_notifications = len(notifications.get_notifications())
            st.metric("–í—Å–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", total_notifications)
        
        with col2:
            unread_count = notifications.get_unread_count()
            st.metric("–ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö", unread_count)
        
        with col3:
            st.metric("–ú–∞–∫—Å–∏–º—É–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", notifications.max_notifications)
        
        # Notification type settings
        st.markdown("#### üì± –¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        
        notification_settings = st.session_state.get('notification_settings', {
            'trade_opened': True,
            'trade_closed': True,
            'signal_generated': True,
            'risk_warning': True,
            'system_status': True,
            'performance_update': True
        })
        
        col1, col2 = st.columns(2)
        
        with col1:
            trade_opened = st.checkbox(
                "üìà –û—Ç–∫—Ä—ã—Ç–∏–µ —Å–¥–µ–ª–æ–∫",
                value=notification_settings.get('trade_opened', True),
                help="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –Ω–æ–≤—ã—Ö –ø–æ–∑–∏—Ü–∏–π"
            )
            
            trade_closed = st.checkbox(
                "üìä –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–¥–µ–ª–æ–∫",
                value=notification_settings.get('trade_closed', True),
                help="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–π"
            )
            
            signal_generated = st.checkbox(
                "üéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤",
                value=notification_settings.get('signal_generated', True),
                help="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–∞—Ö"
            )
        
        with col2:
            risk_warning = st.checkbox(
                "‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ —Ä–∏—Å–∫–∞—Ö",
                value=notification_settings.get('risk_warning', True),
                help="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–∏—Å–∫–æ–≤—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö"
            )
            
            system_status = st.checkbox(
                "üîß –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã",
                value=notification_settings.get('system_status', True),
                help="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"
            )
            
            performance_update = st.checkbox(
                "üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
                value=notification_settings.get('performance_update', True),
                help="–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
            )
        
        # Notification management
        st.markdown("#### üßπ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            if st.button("‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ", use_container_width=True):
                marked_count = notifications.mark_all_as_read()
                st.success(f"–û—Ç–º–µ—á–µ–Ω–æ {marked_count} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ")
                time.sleep(1)
                st.rerun()
        
        with col2:
            if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ (7+ –¥–Ω–µ–π)", use_container_width=True):
                cleared_count = notifications.clear_old_notifications(days=7)
                st.success(f"–£–¥–∞–ª–µ–Ω–æ {cleared_count} —Å—Ç–∞—Ä—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
                time.sleep(1)
                st.rerun()
        
        with col3:
            max_notifications = st.number_input(
                "–ú–∞–∫—Å. —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
                min_value=50,
                max_value=500,
                value=notifications.max_notifications,
                step=10
            )
        
        # Save notification settings
        if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", use_container_width=True):
            st.session_state.notification_settings = {
                'trade_opened': trade_opened,
                'trade_closed': trade_closed,
                'signal_generated': signal_generated,
                'risk_warning': risk_warning,
                'system_status': system_status,
                'performance_update': performance_update
            }
            
            notifications.max_notifications = max_notifications
            
            st.success("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            time.sleep(1)
            st.rerun()
        
        # Recent notifications preview
        st.markdown("#### üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        
        recent_notifications = notifications.get_notifications(limit=10)
        
        if recent_notifications:
            for notif in recent_notifications:
                # Icon based on type
                icon = {
                    'trade_opened': 'üìà',
                    'trade_closed': 'üìä',
                    'signal_generated': 'üéØ',
                    'risk_warning': '‚ö†Ô∏è',
                    'system_status': 'üîß',
                    'performance_update': 'üìä'
                }.get(notif.type.value, 'üìù')
                
                # Status indicator
                status = "üî¥" if not notif.read else "‚úÖ"
                
                # Priority color
                if notif.priority == 'critical':
                    st.error(f"{status} {icon} **{notif.title}** - {notif.timestamp.strftime('%H:%M:%S')}")
                elif notif.priority == 'high':
                    st.warning(f"{status} {icon} **{notif.title}** - {notif.timestamp.strftime('%H:%M:%S')}")
                else:
                    st.info(f"{status} {icon} **{notif.title}** - {notif.timestamp.strftime('%H:%M:%S')}")
                
                st.caption(f"   {notif.message}")
        else:
            st.info("üì≠ –ù–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    
    except Exception as e:
        logger.error(f"Error in notification settings: {str(e)}")
        st.error("–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")

def show_security_settings():
    """Display security settings"""
    try:
        st.markdown("### üõ°Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
        
        # Security manager
        security_manager = st.session_state.security_manager
        
        # Current session info
        session_info = security_manager.get_session_info()
        
        if session_info['authenticated']:
            st.success("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.metric("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", session_info['username'])
                st.metric("–í—Ä–µ–º—è —Å–µ—Å—Å–∏–∏", f"{session_info['session_age_hours']:.1f} —á–∞—Å–æ–≤")
            
            with col2:
                st.metric("–û—Å—Ç–∞–µ—Ç—Å—è –≤—Ä–µ–º–µ–Ω–∏", f"{session_info['remaining_hours']:.1f} —á–∞—Å–æ–≤")
                st.metric("–¢–æ–∫–µ–Ω —Å–µ—Å—Å–∏–∏", session_info['session_token'])
        
        # Security settings
        st.markdown("#### üîê –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.info(f"**–¢–∞–π–º–∞—É—Ç —Å–µ—Å—Å–∏–∏:** {security_manager.session_timeout / 3600:.0f} —á–∞—Å–æ–≤")
            st.info(f"**–ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞:** {security_manager.max_login_attempts}")
            st.info(f"**–í—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:** {security_manager.lockout_duration / 60:.0f} –º–∏–Ω—É—Ç")
        
        with col2:
            st.info(f"**–ê–ª–≥–æ—Ä–∏—Ç–º —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è:** SHA-256 —Å —Å–æ–ª—å—é")
            st.info(f"**–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ API –∫–ª—é—á–µ–π:** XOR —Å —Ç–æ–∫–µ–Ω–æ–º —Å–µ—Å—Å–∏–∏")
            st.info(f"**–î–ª–∏–Ω–∞ —Ç–æ–∫–µ–Ω–∞ —Å–µ—Å—Å–∏–∏:** 32 –±–∞–π—Ç–∞")
        
        # Security actions
        st.markdown("#### üîß –î–µ–π—Å—Ç–≤–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            if st.button("üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å —Å–µ—Å—Å–∏—é", use_container_width=True):
                security_manager.extend_session()
                st.success("‚úÖ –°–µ—Å—Å–∏—è –ø—Ä–æ–¥–ª–µ–Ω–∞")
                time.sleep(1)
                st.rerun()
        
        with col2:
            if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å API –∫–ª—é—á–∏", use_container_width=True):
                SecureDataManager.clear_api_keys()
                st.success("‚úÖ API –∫–ª—é—á–∏ —É–¥–∞–ª–µ–Ω—ã")
                time.sleep(1)
                st.rerun()
        
        with col3:
            if st.button("üö™ –í—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã", use_container_width=True):
                security_manager.logout()
                st.success("‚úÖ –í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω")
                time.sleep(1)
                st.rerun()
        
        # Security audit
        st.markdown("#### üìä –ê—É–¥–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
        
        # Check for security issues
        security_issues = []
        
        # Check API keys
        api_key, secret_key = SecureDataManager.get_api_keys()
        if not api_key or not secret_key:
            security_issues.append("‚ö†Ô∏è API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        
        # Check session age
        if session_info['authenticated'] and session_info['session_age_hours'] > 6:
            security_issues.append("‚ö†Ô∏è –°–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞ –±–æ–ª–µ–µ 6 —á–∞—Å–æ–≤")
        
        # Check demo mode
        if st.session_state.get('demo_mode', True):
            security_issues.append("‚ÑπÔ∏è –†–∞–±–æ—Ç–∞ –≤ –¥–µ–º–æ —Ä–µ–∂–∏–º–µ (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)")
        
        if security_issues:
            st.markdown("**üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:**")
            for issue in security_issues:
                if issue.startswith("‚ö†Ô∏è"):
                    st.warning(issue)
                else:
                    st.info(issue)
        else:
            st.success("‚úÖ –ü—Ä–æ–±–ª–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
        
        # Security recommendations
        st.markdown("#### üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
        
        st.info("""
        üîí **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
        - –†–µ–≥—É–ª—è—Ä–Ω–æ –º–µ–Ω—è–π—Ç–µ –ø–∞—Ä–æ–ª–∏ –∏ API –∫–ª—é—á–∏
        - –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–±—â–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä—ã –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
        - –í—Å–µ–≥–¥–∞ –≤—ã—Ö–æ–¥–∏—Ç–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã –ø–æ—Å–ª–µ —Ä–∞–±–æ—Ç—ã
        - –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∏—Å—Ç–æ—Ä–∏—é —Ç–æ—Ä–≥–æ–≤–ª–∏ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∏–ª—å–Ω—ã–µ –ø–∞—Ä–æ–ª–∏
        - –û–≥—Ä–∞–Ω–∏—á—å—Ç–µ –ø—Ä–∞–≤–∞ API –∫–ª—é—á–µ–π —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
        """)
    
    except Exception as e:
        logger.error(f"Error in security settings: {str(e)}")
        st.error("–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")

def show_system_settings():
    """Display system settings"""
    try:
        st.markdown("### üìä –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        # System information
        st.markdown("#### ‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.info("**–í–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:** 1.0.0")
            st.info("**–¢–æ—Ä–≥–æ–≤–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞:** MEXC")
            st.info("**–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:** " + ("–î–µ–º–æ" if st.session_state.get('demo_mode', True) else "–†–µ–∞–ª—å–Ω—ã–π"))
            st.info("**AI –º–æ–¥–µ–ª—å:** –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ v1.0")
        
        with col2:
            st.info("**–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã:** 15+")
            st.info("**–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π:** 6")
            st.info("**–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏:** 3-5")
            st.info("**–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–ª–µ—á–∞:** –î–æ 5x")
        
        # System components status
        st.markdown("#### üîß –°—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
        
        # Check components
        components_status = []
        
        try:
            # Check trader
            if 'trader' in st.session_state:
                components_status.append(("ü§ñ –¢–æ—Ä–≥–æ–≤—ã–π –¥–≤–∏–∂–æ–∫", "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω", "success"))
            else:
                components_status.append(("ü§ñ –¢–æ—Ä–≥–æ–≤—ã–π –¥–≤–∏–∂–æ–∫", "‚ùå –ù–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", "error"))
            
            # Check security
            if st.session_state.security_manager.is_authenticated():
                components_status.append(("üõ°Ô∏è –°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞", "success"))
            else:
                components_status.append(("üõ°Ô∏è –°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", "‚ùå –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω", "error"))
            
            # Check API keys
            api_key, secret_key = SecureDataManager.get_api_keys()
            if api_key and secret_key:
                components_status.append(("üîë API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è", "‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∞", "success"))
            else:
                components_status.append(("üîë API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è", "‚ö†Ô∏è –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞", "warning"))
            
            # Check news parser
            if 'trader' in st.session_state:
                components_status.append(("üì∞ –ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π", "‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω", "success"))
            else:
                components_status.append(("üì∞ –ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π", "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω", "error"))
            
            # Check signal generator
            if 'signal_generator' in st.session_state:
                components_status.append(("üéØ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤", "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω", "success"))
            else:
                components_status.append(("üéØ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤", "‚ùå –ù–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", "error"))
        
        except Exception as e:
            components_status.append(("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏", str(e), "error"))
        
        # Display component status
        for component, status, status_type in components_status:
            col1, col2 = st.columns([2, 1])
            
            with col1:
                st.write(f"**{component}**")
            
            with col2:
                if status_type == "success":
                    st.success(status)
                elif status_type == "warning":
                    st.warning(status)
                else:
                    st.error(status)
        
        # System controls
        st.markdown("#### üéõÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            if st.button("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã", use_container_width=True):
                restart_system_components()
        
        with col2:
            if st.button("üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à–∏", use_container_width=True):
                clear_system_caches()
        
        with col3:
            if st.button("üìä –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å", use_container_width=True):
                st.rerun()
        
        # Advanced settings
        st.markdown("#### ‚öôÔ∏è –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        with st.expander("üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"):
            col1, col2 = st.columns(2)
            
            with col1:
                log_level = st.selectbox(
                    "–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è",
                    ["DEBUG", "INFO", "WARNING", "ERROR"],
                    index=1,
                    help="–£—Ä–æ–≤–µ–Ω—å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –ª–æ–≥–æ–≤"
                )
                
                cache_duration = st.number_input(
                    "–í—Ä–µ–º—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è (—Å–µ–∫)",
                    min_value=60,
                    max_value=3600,
                    value=300,
                    step=60,
                    help="–í—Ä–µ–º—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"
                )
            
            with col2:
                max_threads = st.number_input(
                    "–ú–∞–∫—Å–∏–º—É–º –ø–æ—Ç–æ–∫–æ–≤",
                    min_value=1,
                    max_value=10,
                    value=4,
                    step=1,
                    help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
                )
                
                request_timeout = st.number_input(
                    "–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ (—Å–µ–∫)",
                    min_value=5,
                    max_value=60,
                    value=10,
                    step=5,
                    help="–¢–∞–π–º–∞—É—Ç –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤"
                )
            
            if st.button("üíæ –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"):
                st.session_state.technical_settings = {
                    'log_level': log_level,
                    'cache_duration': cache_duration,
                    'max_threads': max_threads,
                    'request_timeout': request_timeout
                }
                st.success("‚úÖ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        
        # Data management
        st.markdown("#### üìÇ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            if st.button("üì§ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ", use_container_width=True):
                export_trading_data()
        
        with col2:
            if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", use_container_width=True):
                if st.session_state.get('confirm_clear_history', False):
                    clear_trading_history()
                    st.session_state.confirm_clear_history = False
                else:
                    st.session_state.confirm_clear_history = True
                    st.warning("‚ö†Ô∏è –ù–∞–∂–º–∏—Ç–µ –µ—â–µ —Ä–∞–∑ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
        
        with col3:
            if st.button("üîÑ –°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫", use_container_width=True):
                if st.session_state.get('confirm_reset_settings', False):
                    reset_all_settings()
                    st.session_state.confirm_reset_settings = False
                else:
                    st.session_state.confirm_reset_settings = True
                    st.warning("‚ö†Ô∏è –ù–∞–∂–º–∏—Ç–µ –µ—â–µ —Ä–∞–∑ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
    
    except Exception as e:
        logger.error(f"Error in system settings: {str(e)}")
        st.error("–û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫")

# Helper functions

def save_api_keys(api_key: str, secret_key: str):
    """Save API keys securely"""
    try:
        success = SecureDataManager.store_api_keys(api_key, secret_key)
        
        if success:
            st.success("‚úÖ API –∫–ª—é—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ")
            
            # Reinitialize trader with new keys
            if 'trader' in st.session_state:
                demo_mode = st.session_state.get('demo_mode', True)
                st.session_state.trader = AdvancedTrader(api_key, secret_key, demo_mode)
            
            time.sleep(1)
            st.rerun()
        else:
            st.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è API –∫–ª—é—á–µ–π")
    
    except Exception as e:
        logger.error(f"Error saving API keys: {str(e)}")
        st.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}")

def test_api_keys(api_key: str, secret_key: str):
    """Test API keys connectivity"""
    try:
        # Create temporary client to test
        from exchanges.mexc_client import MEXCClient
        
        test_client = MEXCClient(api_key, secret_key, demo_mode=True)
        
        with st.spinner("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∫–ª—é—á–µ–π..."):
            # Test basic connectivity
            server_time = test_client.get_server_time()
            
            if 'error' in server_time:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {server_time['error']}")
                return
            
            # Test authenticated request
            account_info = test_client.get_account_info()
            
            if 'error' in account_info:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {account_info['error']}")
                return
            
            st.success("‚úÖ API –∫–ª—é—á–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            st.info("üîç –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å MEXC —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
    
    except Exception as e:
        logger.error(f"Error testing API keys: {str(e)}")
        st.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")

def clear_api_keys():
    """Clear saved API keys"""
    try:
        SecureDataManager.clear_api_keys()
        
        # Reset trader to demo mode
        if 'trader' in st.session_state:
            st.session_state.trader = AdvancedTrader("", "", demo_mode=True)
            st.session_state.demo_mode = True
        
        st.success("‚úÖ API –∫–ª—é—á–∏ —É–¥–∞–ª–µ–Ω—ã")
        time.sleep(1)
        st.rerun()
    
    except Exception as e:
        logger.error(f"Error clearing API keys: {str(e)}")
        st.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {str(e)}")

def save_trading_parameters(trader, max_positions, position_size_pct, max_leverage, 
                          min_confidence_threshold, max_hold_time_hours, indicator_weights):
    """Save trading parameters"""
    try:
        # Update trader parameters
        trader.max_positions = max_positions
        trader.position_size_pct = position_size_pct
        trader.max_leverage = max_leverage
        trader.min_confidence_threshold = min_confidence_threshold
        trader.max_hold_time_hours = max_hold_time_hours
        trader.indicator_weights = indicator_weights
        
        # Save to session state for persistence
        st.session_state.trading_parameters = {
            'max_positions': max_positions,
            'position_size_pct': position_size_pct,
            'max_leverage': max_leverage,
            'min_confidence_threshold': min_confidence_threshold,
            'max_hold_time_hours': max_hold_time_hours,
            'indicator_weights': indicator_weights
        }
        
        st.success("‚úÖ –¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        logger.info("Trading parameters updated")
        time.sleep(1)
        st.rerun()
    
    except Exception as e:
        logger.error(f"Error saving trading parameters: {str(e)}")
        st.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}")

def reset_trading_parameters(trader):
    """Reset trading parameters to defaults"""
    try:
        # Default values
        trader.max_positions = 3
        trader.position_size_pct = 33.33
        trader.max_leverage = 5.0
        trader.min_confidence_threshold = 70.0
        trader.max_hold_time_hours = 168
        trader.indicator_weights = {
            'technical': 0.35,
            'fundamental': 0.25,
            'sentiment': 0.20,
            'momentum': 0.20
        }
        
        # Clear saved parameters
        if 'trading_parameters' in st.session_state:
            del st.session_state.trading_parameters
        
        st.success("‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        time.sleep(1)
        st.rerun()
    
    except Exception as e:
        logger.error(f"Error resetting trading parameters: {str(e)}")
        st.error(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞: {str(e)}")

def restart_system_components():
    """Restart system components"""
    try:
        # Clear and reinitialize components
        if 'trader' in st.session_state:
            api_key, secret_key = SecureDataManager.get_api_keys()
            demo_mode = st.session_state.get('demo_mode', True)
            st.session_state.trader = AdvancedTrader(api_key, secret_key, demo_mode)
        
        if 'signal_generator' in st.session_state:
            from signals.signal_generator import SignalGenerator
            st.session_state.signal_generator = SignalGenerator()
        
        st.success("‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã")
        logger.info("System components restarted")
        time.sleep(1)
        st.rerun()
    
    except Exception as e:
        logger.error(f"Error restarting components: {str(e)}")
        st.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: {str(e)}")

def clear_system_caches():
    """Clear system caches"""
    try:
        # Clear signal generator cache
        if 'signal_generator' in st.session_state:
            st.session_state.signal_generator.clear_cache()
        
        # Clear news parser cache
        if 'trader' in st.session_state:
            st.session_state.trader.news_parser.clear_cache()
        
        st.success("‚úÖ –ö–µ—à–∏ —Å–∏—Å—Ç–µ–º—ã –æ—á–∏—â–µ–Ω—ã")
        logger.info("System caches cleared")
        time.sleep(1)
        st.rerun()
    
    except Exception as e:
        logger.error(f"Error clearing caches: {str(e)}")
        st.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {str(e)}")

def export_trading_data():
    """Export trading data"""
    try:
        if 'trader' not in st.session_state:
            st.warning("‚ö†Ô∏è –¢–æ—Ä–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return
        
        trader = st.session_state.trader
        
        # Export to DataFrame
        trades_df = trader.trading_history.export_to_dataframe()
        
        if not trades_df.empty:
            # Convert to CSV
            csv_data = trades_df.to_csv(index=False)
            
            st.download_button(
                label="üì• –°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤–ª–∏ (CSV)",
                data=csv_data,
                file_name=f"trading_data_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                mime="text/csv"
            )
            
            st.success(f"‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω —ç–∫—Å–ø–æ—Ä—Ç {len(trades_df)} —Å–¥–µ–ª–æ–∫")
        else:
            st.info("‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
    
    except Exception as e:
        logger.error(f"Error exporting data: {str(e)}")
        st.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {str(e)}")

def clear_trading_history():
    """Clear trading history"""
    try:
        if 'trader' in st.session_state:
            trader = st.session_state.trader
            
            # Clear all trading data
            trader.trading_history.trades.clear()
            trader.trading_history.positions.clear()
            trader.notifications.notifications.clear()
            
            st.success("‚úÖ –ò—Å—Ç–æ—Ä–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –æ—á–∏—â–µ–Ω–∞")
            logger.info("Trading history cleared")
        else:
            st.warning("‚ö†Ô∏è –¢–æ—Ä–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        time.sleep(1)
        st.rerun()
    
    except Exception as e:
        logger.error(f"Error clearing history: {str(e)}")
        st.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {str(e)}")

def reset_all_settings():
    """Reset all settings to defaults"""
    try:
        # Clear all saved settings
        settings_keys = [
            'trading_parameters', 'notification_settings', 'technical_settings',
            'demo_mode', 'system_status'
        ]
        
        for key in settings_keys:
            if key in st.session_state:
                del st.session_state[key]
        
        # Reset system status
        st.session_state.system_status = '–í –æ–∂–∏–¥–∞–Ω–∏–∏'
        st.session_state.demo_mode = True
        
        # Reinitialize trader
        if 'trader' in st.session_state:
            api_key, secret_key = SecureDataManager.get_api_keys()
            st.session_state.trader = AdvancedTrader(api_key, secret_key, demo_mode=True)
        
        st.success("‚úÖ –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        logger.info("All settings reset to defaults")
        time.sleep(1)
        st.rerun()
    
    except Exception as e:
        logger.error(f"Error resetting settings: {str(e)}")
        st.error(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {str(e)}")
